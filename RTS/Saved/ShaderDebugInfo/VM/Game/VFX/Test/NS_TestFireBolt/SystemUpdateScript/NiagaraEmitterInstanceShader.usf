
#line   1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"





#pragma warning(disable:4008)
#line   7 "/Engine/Public/Platform.ush"


#line   7 "/Engine/Public/FP16Math.ush"




















	
	
	
	
	
	
	










#line   9 "/Engine/Public/Platform.ush"












































#line  66 "/Engine/Public/Platform.ush"


#line   3 "/Engine/Public/BindlessResources.ush"



















#line  43 "/Engine/Public/BindlessResources.ush"

	
	
	

	


#line  72 "/Engine/Public/BindlessResources.ush"

	
	
	

	

































#line  68 "/Engine/Public/Platform.ush"

#line   8 "/Engine/Public/OverloadMacros.ush"







	





	





#line  69 "/Engine/Public/Platform.ush"





#line   7 "/Engine/Public/ShaderVersion.ush"
#line  74 "/Engine/Public/Platform.ush"


























































































































































































	





























	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	














#line 397 "/Engine/Public/Platform.ush"

	














































	
	
	
	
	





































	



	
	
	
	
	



	







#line 520 "/Engine/Public/Platform.ush"




































































void ShaderYield()
{
	
}




























#line 638 "/Engine/Public/Platform.ush"



















































































































































































	

	void WriteDispatchIndirectArgs(RWBuffer<uint> RWIndirectDispatchArgsBuffer, in uint InIndex, in uint InIndirectArgX, in uint InIndirectArgY, in uint InIndirectArgZ)
	{
		RWIndirectDispatchArgsBuffer[3 * InIndex + 0] = InIndirectArgX;
		RWIndirectDispatchArgsBuffer[3 * InIndex + 1] = InIndirectArgY;
		RWIndirectDispatchArgsBuffer[3 * InIndex + 2] = InIndirectArgZ;
	}


void WriteDispatchIndirectArgs(RWBuffer<uint> RWIndirectDispatchArgsBuffer, in uint InIndex, in uint3 InIndirectArg)
{
	WriteDispatchIndirectArgs(RWIndirectDispatchArgsBuffer, InIndex, InIndirectArg.x, InIndirectArg.y, InIndirectArg.z);
}





























float min3(float a, float b, float c)
{
	return min(a, min(b, c));
}

int min3(int a, int b, int c)
{
	return min(a, min(b, c));
}

uint min3(uint a, uint b, uint c)
{
	return min(a, min(b, c));
}

  float2 min3 ( float2 a, float2 b, float2 c) { return float2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); } float3 min3 ( float3 a, float3 b, float3 c) { return float3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); } float4 min3 ( float4 a, float4 b, float4 c) { return float4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }
  int2 min3 ( int2 a, int2 b, int2 c) { return int2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); } int3 min3 ( int3 a, int3 b, int3 c) { return int3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); } int4 min3 ( int4 a, int4 b, int4 c) { return int4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }
  uint2 min3 ( uint2 a, uint2 b, uint2 c) { return uint2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); } uint3 min3 ( uint3 a, uint3 b, uint3 c) { return uint3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); } uint4 min3 ( uint4 a, uint4 b, uint4 c) { return uint4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }

float max3(float a, float b, float c)
{
	return max(a, max(b, c));
}

int max3(int a, int b, int c)
{
	return max(a, max(b, c));
}

uint max3(uint a, uint b, uint c)
{
	return max(a, max(b, c));
}

  float2 max3 ( float2 a, float2 b, float2 c) { return float2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); } float3 max3 ( float3 a, float3 b, float3 c) { return float3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); } float4 max3 ( float4 a, float4 b, float4 c) { return float4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
  int2 max3 ( int2 a, int2 b, int2 c) { return int2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); } int3 max3 ( int3 a, int3 b, int3 c) { return int3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); } int4 max3 ( int4 a, int4 b, int4 c) { return int4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
  uint2 max3 ( uint2 a, uint2 b, uint2 c) { return uint2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); } uint3 max3 ( uint3 a, uint3 b, uint3 c) { return uint3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); } uint4 max3 ( uint4 a, uint4 b, uint4 c) { return uint4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }

#line 938 "/Engine/Public/Platform.ush"








#line 972 "/Engine/Public/Platform.ush"

  bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); } bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); } bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); } bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); } bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); } bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); } bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); } bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); } bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 




  int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); } int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); } int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); } int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); } int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); } int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); } int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); } int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); } int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 
  float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); } float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); } float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); } float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); } float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); } float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); } float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); } float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); } float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); } float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); } float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); } float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); } float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); } float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); } float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); } float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); } float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); } float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); } float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); } float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); } float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); } float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); } 











bool  and_internal(bool  a, bool  b) { return bool(a && b); }
bool2 and_internal(bool2 a, bool2 b) { return bool2(a.x && b.x, a.y && b.y); }
bool3 and_internal(bool3 a, bool3 b) { return bool3(a.x && b.x, a.y && b.y, a.z && b.z); }
bool4 and_internal(bool4 a, bool4 b) { return bool4(a.x && b.x, a.y && b.y, a.z && b.z, a.w && b.w); }

bool  or_internal(bool  a, bool  b) { return bool(a || b); }
bool2 or_internal(bool2 a, bool2 b) { return bool2(a.x || b.x, a.y || b.y); }
bool3 or_internal(bool3 a, bool3 b) { return bool3(a.x || b.x, a.y || b.y, a.z || b.z); }
bool4 or_internal(bool4 a, bool4 b) { return bool4(a.x || b.x, a.y || b.y, a.z || b.z, a.w || b.w); }




#line 1023 "/Engine/Public/Platform.ush"




float  CondMask(bool Cond, float  Src0, float  Src1) { return Cond ? Src0 : Src1; }
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }

int  CondMask(bool Cond, int  Src0, int  Src1) { return Cond ? Src0 : Src1; }
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }

uint  CondMask(bool Cond, uint  Src0, uint  Src1) { return Cond ? Src0 : Src1; }
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }









uint BitFieldInsertU32(uint Mask, uint Preserve, uint Enable)
{
	return (Preserve & Mask) | (Enable & ~Mask);
}

uint BitFieldExtractU32(uint Data, uint Size, uint Offset)
{
	
	
	Size &= 31;
	Offset &= 31;
	return (Data >> Offset) & ((1u << Size) - 1u);
}

int BitFieldExtractI32(int Data, uint Size, uint Offset)
{
	Size &= 31u;
	Offset &= 31u;
	const uint Shift = (32u - Size) & 31u;
	const int Value = (Data >> Offset) & int((1u << Size) - 1u);
	return (Value << Shift) >> Shift;
}

uint BitFieldMaskU32(uint MaskWidth, uint MaskLocation)
{
	MaskWidth &= 31u;
	MaskLocation &= 31u;

	return ((1u << MaskWidth) - 1u) << MaskLocation;
}





int MulI24(int I1, int I2)
{
	
	return (I1 * I2);
}

uint MulU24(uint U1, uint U2)
{
	
	return U1 * U2;
}

int MadI24(int I1, int I2, int I3)
{
	
	return I1 * I2 + I3;
}

uint MadU24(uint U1, uint U2, uint U3)
{
	
	return U1 * U2 + U3;
}



uint Padding(uint Value, uint Pow2)
{
	return (Value + Pow2 - 1u) & ~(Pow2 - 1u);
}

uint CeilLog2(uint Value)
{
	return Value < 2u ? 0u : firstbithigh(Value - 1u) + 1u;
}

float BitFieldExtractFloat(uint Bits, uint Count, uint Offset)
{
	return BitFieldExtractU32(Bits, Count, Offset) / (float)BitFieldMaskU32(Count, 0u);
}



uint BitAlignU32(uint High, uint Low, uint Shift)
{
	Shift &= 31u;

	uint Result = Low >> Shift;
	Result |= Shift > 0u ? (High << (32u - Shift)) : 0u;
	return Result;
}




uint ByteAlignU32(uint High, uint Low, uint Shift)
{
	return BitAlignU32(High, Low, Shift * 8);
}











uint2 PackUlongType(uint2 Value)
{
	return Value;
}

uint2 UnpackUlongType(uint2 Value)
{
	return Value;
}




uint MaskedBitCount( uint2 Bits, uint Index )
{
	bool bLow = Index < 32;

	uint Mask = 1u << ( Index - ( bLow ? 0 : 32 ) );
	Mask -= 1;

	uint Offset;
	Offset  = countbits( Bits.x & ( bLow ? Mask : ~0u ) );
	Offset += countbits( Bits.y & ( bLow ? 0 : Mask ) );
	return Offset;
}











#line 1231 "/Engine/Public/Platform.ush"




	









	
	







	
		
	






















#line   7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


#line   7 "/Plugin/FX/Niagara/Private/NiagaraShaderVersion.ush"
#line   9 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"



	


	







	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;

#line   7 "/Engine/Private/Definitions.usf"



























































































































































































































































































#line  27 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"



float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){  return x - y * (x/y);  }

	

float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }






#line 205 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"























float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;

	
	
	

	
	return float4((v >> 8) & 0x00ffffff) / 16777216.0; 
	
}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0; 
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3) 
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{
	
	
	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}





#line 355 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

	

	float rand(float x); 

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x) 
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}
	
	int rand(int x); 




int hash_single(int a)
{
    int x = (a ^ 61) ^ (a >> 16);
	x += x << 3;
	x ^= x >> 4;
	x *= 0x27d4eb2d;
	x ^= x >> 15;
	return x;
}

int hash(int a, int b)
{
	return hash_single(a) ^ hash_single(b * 31);
}

float hash_float(int a, int b)
{
	return (hash(a, b) & 0x00ffffff) / 16777216.0;
}


float hash_float(float a, int b)
{
	return (hash(a * 16777216.0, b) & 0x00ffffff) / 16777216.0;
}


float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x) 
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{
	
	
	
	return (int) rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3) 
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{
	
	
	return rand(x.x-1, Seed1, Seed2, Seed3);
}






	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);

	
	
	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);

	
	int ExecIndex();

	
	
	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);  
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);
	float InputDataHalf(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);  
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
	void OutputDataHalf(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);









#line 780 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


	


	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
	











		return AcquireIndex(DataSetID, bIsValid);
	}



struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

#line 841 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"




#line 1735 "/Engine/Generated/NiagaraEmitterInstance.ush"
struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_WorldDeltaTime;
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
	int Engine_QualityLevel;
	int Engine_PaddingInt32_0;
	int Engine_PaddingInt32_1;
}

cbuffer FNiagaraSystemParameters
{
}

cbuffer FNiagaraOwnerParameters
{
}

cbuffer FNiagaraEmitterParameters
{
}

cbuffer FNiagaraExternalParameters
{
	float Constants_SystemState_LoopDelay;
	float Constants_SystemState_LoopDuration;
	float Constants_Grid3D_Gas_Master_Emitter_EmitterState_LoopDelay;
	float3 Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_UpdateEmitter_Gravity;
	float Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_UpdateEmitter_ResolutionGridOffset;
	float2 Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_DensityRange;
	float2 Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_TemperatureRange;
	float Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_DensityAlbedo;
	float Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_DensityGain;
	float Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_TemperatureColorGain;
	float Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_TemperatureOpacityGain;
	float4 Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_SmokeColor;
	float Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_RenderWriteDensityThreshold;
	int Emitter_RandomSeed;
}

struct FParamMap0_User
{
	float3 WorldSpaceSize;
};

struct FParamMap0_Transient
{
	bool FirstFrame;
	int ScalabilityEmitterExecutionState;
	int ScalabilityExecutionState;
};

struct FParamMap0_SystemState
{
	float LoopDelay;
	bool RecalculateDurationEachLoop;
};

struct FParamMap0_System
{
	float Age;
	bool bCompleteOnInactive;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
};

struct FParamMap0_Local_SystemState
{
	bool LoopCountIncreased;
};

struct FParamMap0_Local_Grid3D_Gas_UpdateEmitter
{
	float3 Extents;
	int GridCellsX;
	int GridCellsY;
	float3 GridCenter;
	float2 GridExtents;
	float4 GridRotation;
	float4x4 InvLocalTranslationMatrix;
	float4x4 InvScaleMatrix;
	float4x4 LocalTranslationMatrix;
	float4x4 ScaleMatrix;
};

struct FParamMap0_Local_EmitterState
{
	bool LoopCountIncreased;
	float LoopDuration;
	bool NoActiveEmitterParticles;
	int PreviousEmitterState;
};

struct FParamMap0_Local
{
	FParamMap0_Local_EmitterState EmitterState;
	FParamMap0_Local_Grid3D_Gas_UpdateEmitter Grid3D_Gas_UpdateEmitter;
	FParamMap0_Local_SystemState SystemState;
};

struct FParamMap0_Grid3D_RigidMesh_FindColliders
{
	float3 GridCenterPosition;
	float4 GridRotation;
	float3 WorldGridExtents;
};

struct FParamMap0_Grid3D_Gas_UpdateEmitter
{
	float DeltaTime;
	bool DrawGridBounds;
	bool DrawResolutionGrid;
	float3 LocalPivot;
	int NumCellsX;
	int NumCellsY;
	int NumCellsZ;
};

struct FParamMap0_Grid3D_Gas_Master_Emitter_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Grid3D_Gas_Master_Emitter_Previous
{
	float3 GridCenterPosition;
	float4 GridOrientation;
	float3 WorldGridExtents;
};

struct FParamMap0_Grid3D_Gas_Master_Emitter_Owner
{
	float3 Acceleration;
	float3 PreviousVelocity;
	float3 Velocity;
};

struct FParamMap0_Grid3D_Gas_Master_Emitter_OVERRIDE
{
	float AttributeResolutionMultiplier;
	bool DrawBounds;
	bool DrawResolutionGrid;
	int PressureSolveIterations;
	int ResolutionMaxAxis;
};

struct FParamMap0_Grid3D_Gas_Master_Emitter_Initial_OVERRIDE
{
	bool DrawResolutionGrid;
};

struct FParamMap0_Grid3D_Gas_Master_Emitter_Initial
{
	FParamMap0_Grid3D_Gas_Master_Emitter_Initial_OVERRIDE OVERRIDE;
};

struct FParamMap0_Grid3D_Gas_Master_Emitter_Grid3D_RigidMesh_FindColliders
{
	bool FindColliders;
};

struct FParamMap0_Grid3D_Gas_Master_Emitter_Grid3D_Gas_QualityOverrides
{
	int QualityOverride;
};

struct FParamMap0_Grid3D_Gas_Master_Emitter
{
	float Age;
	bool CompensateForActorMotion;
	float CurrentLoopDuration;
	float3 DebugSliceAxis;
	float3 DebugSliceCenter;
	float DebugSliceRemapRangeMax;
	float DebugSliceRemapRangeMin;
	int DebugVectorSliceCellOffset;
	float DebugVectorSliceScale;
	float DistanceTraveled;
	float dt;
	float dx;
	float dx_render;
	float dx_scalars;
	int ExecutionState;
	int ExecutionStateSource;
	float3 gravity;
	FParamMap0_Grid3D_Gas_Master_Emitter_Grid3D_Gas_QualityOverrides Grid3D_Gas_QualityOverrides;
	FParamMap0_Grid3D_Gas_Master_Emitter_Grid3D_RigidMesh_FindColliders Grid3D_RigidMesh_FindColliders;
	float3 GridCenterPosition;
	float4 GridOrientation;
	FParamMap0_Grid3D_Gas_Master_Emitter_Initial Initial;
	float3 LocalPivot;
	bool LocalSpaceParticleSource;
	float4x4 LocalToUnit;
	float4x4 LocalToWorld;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	int NumCellsMaxAxisScalar;
	int NumCellsMaxAxisVelocity;
	int NumCellsTotalScalar;
	int NumCellsTotalVelocity;
	int NumCellsXRenderTarget;
	int NumCellsXScalar;
	int NumCellsXVelocity;
	int NumCellsYRenderTarget;
	int NumCellsYScalar;
	int NumCellsYVelocity;
	int NumCellsZRenderTarget;
	int NumCellsZScalar;
	int NumCellsZVelocity;
	FParamMap0_Grid3D_Gas_Master_Emitter_OVERRIDE OVERRIDE;
	FParamMap0_Grid3D_Gas_Master_Emitter_Owner Owner;
	int ParticleSourceGrid_Density_TemperatureIndex;
	int ParticleSourceGrid_DensityIndex;
	int ParticleSourceGrid_DivergenceIndex;
	int ParticleSourceGrid_RGBAIndex;
	int ParticleSourceGrid_TemperatureIndex;
	int ParticleSourceGrid_Velocity_DivergenceIndex;
	int ParticleSourceGrid_VelocityIndex;
	FParamMap0_Grid3D_Gas_Master_Emitter_Previous Previous;
	float4x4 PreviousWorldToUnit;
	float RenderDensityAlbedo;
	float RenderDensityGain;
	float RenderDensityOffset;
	float RenderDensityRange;
	float4 RenderSmokeColor;
	float RenderTempColorGain;
	float RenderTemperatureOffset;
	float RenderTemperatureRange;
	float RenderTempOpacityGain;
	bool RenderUseBlackbodyCurve;
	bool RenderUseDensityCurve;
	bool RenderUseTemperatureOpacityCurve;
	float RenderWriteDensityThreshold;
	FParamMap0_Grid3D_Gas_Master_Emitter_Scalability Scalability;
	int SimGrid_Density_TemperatureIndex;
	int SimGrid_DensityIndex;
	int SimGrid_PressureIndex;
	int SimGrid_RGBAIndex;
	int SimGrid_SimFloatIndex;
	int SimGrid_SolidVelocity_BoundaryIndex;
	int SimGrid_TemperatureIndex;
	int SimGrid_VelocityIndex;
	float4x4 UnitToLocal;
	float4x4 UnitToWorld;
	bool UseLegacyTransform;
	float3 WorldCellSizeScalar;
	float3 WorldCellSizeVelocity;
	float3 WorldGridExtents;
	float3 WorldRenderGridScale;
	float4x4 WorldToLocal;
	float4x4 WorldToUnit;
};

struct FParamMap0_Engine_System
{
	int RandomSeed;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistanceFraction;
	float4 LWCTile;
	float4 Rotation;
	float4x4 SystemLocalToWorld;
	float4x4 SystemWorldToLocal;
	float3 Velocity;
};

struct FParamMap0_Engine_Grid3D_Gas_Master_Emitter
{
	int NumParticles;
};

struct FParamMap0_Engine_Emitter
{
	int InstanceSeed;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	FParamMap0_Engine_Grid3D_Gas_Master_Emitter Grid3D_Gas_Master_Emitter;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int QualityLevel;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
	float WorldDeltaTime;
};

struct FParamMap0_EmitterState
{
	float LoopDelay;
};

struct FParamMap0_Emitter
{
	int RandomSeed;
};

struct FParamMap0
{
	FParamMap0_Emitter Emitter;
	FParamMap0_EmitterState EmitterState;
	FParamMap0_Engine Engine;
	FParamMap0_Grid3D_Gas_Master_Emitter Grid3D_Gas_Master_Emitter;
	FParamMap0_Grid3D_Gas_UpdateEmitter Grid3D_Gas_UpdateEmitter;
	FParamMap0_Grid3D_RigidMesh_FindColliders Grid3D_RigidMesh_FindColliders;
	FParamMap0_Local Local;
	FParamMap0_System System;
	FParamMap0_SystemState SystemState;
	FParamMap0_Transient Transient;
	FParamMap0_User User;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void SystemState_SystemChangeState002_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_SystemChangeState_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_SystemChangeState001_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_Func_(inout FSimulationContext Context);
void EmitterState_EmitterChangeState002_Grid3D_Gas_Master_Emitter_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState_Grid3D_Gas_Master_Emitter_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState005_Grid3D_Gas_Master_Emitter_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState003_Grid3D_Gas_Master_Emitter_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_Grid3D_Gas_Master_Emitter_Func_(inout FSimulationContext Context);
void CustomHlsl3708683E413FCB14951AE2AB5BE10E2B_Func_(out float3 Out_CustomHLSLOutput, inout FSimulationContext Context);
void CustomHlsl0015F01A0CD4AE6CF31AC2812971C9629C2_Func_(float3 In_Scale, out float4x4 Out_ScaleMatrix);
void CustomHlsl0014FA6C40644C15067A10682A1878D5D7D_Func_(float3 In_Scale, out float4x4 Out_InvScaleMatrix);
void CustomHlsl57F9E64049637B678A890180D6B11CE8_Func_(float4x4 In_T, float4x4 In_S, out float4x4 Out_ret);
void CustomHlsl9267E60445E9C69AC182B1969B11DE37_Func_(float4x4 In_T, float4x4 In_S, out float4x4 Out_ret);
void CustomHlsl466FA4C248473D69F0E41F9320316C4F_Func_(float4x4 In_UnitToLocal, float4x4 In_LocalToWorld, out float4x4 Out_ret);
void NiagaraScript_1268_Emitter_Func_(float4 In_FLOAT4_VAR, int In_TargetChannel, out float Out_NewOutput, inout FSimulationContext Context);
void NiagaraScript_1271_Emitter_Func_(float3 In_Position, float4x4 In_Engine_Owner_SystemLocalToWorld, float4 In_Engine_Owner_LWCTile, out float3 Out_Vector, inout FSimulationContext Context);
void CustomHlslD5ADE620499158F8D6317C9F7CBF9DD5_Func_(float4x4 In_WorldToLocal, float4x4 In_LocalToUnit, out float4x4 Out_ret);
void SetFixedBounds_Grid3D_Gas_Master_Emitter_Grid3D_Gas_UpdateEmitter_EmitterProperties_UEImpureCall(int In_InstanceData, bool In_Execute, bool In_Valid, float3 In_LocalMin, float3 In_LocalMax);
void NiagaraScript_1272_Func_(float4x4 In_MATRIX_VAR, out float3 Out_Scale, inout FSimulationContext Context);
void DrawBox_Grid3D_Gas_Master_Emitter_DebugDraw_UEImpureCall(int In_InstanceData, bool In_Execute, float3 In_Center, float4 In_Rotation, float3 In_Extents, float4 In_Color);
void NiagaraScript_1264_Emitter_Func_(float In_Value, out float Out_ClampedValue, inout FSimulationContext Context);
void NiagaraScript_1275_Emitter_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_(float In_Angle, out float Out_ConvertedAngle, inout FSimulationContext Context);
void CustomHlslE4749C3F466E2F628A8C8D8EC6986A01_Func_(float In_Roll, float In_Pitch, float In_Yaw, out float4 Out_RotationQuat);
void NiagaraScript_1274_AngleInput_NewEnumerator0_Func_(float In_X, float In_Y, float In_Z, out float4 Out_Quaternion, inout FSimulationContext Context);
void CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(float4 In_Quat1, float4 In_Quat2, out float4 Out_Result);
void NiagaraScript_1273_Func_(float4 In_QuaternionA, float4 In_QuaternionB, out float4 Out_Quaternion, inout FSimulationContext Context);
void DrawGrid2D_Grid3D_Gas_Master_Emitter_DebugDraw_UEImpureCall(int In_InstanceData, bool In_Execute, float3 In_Center, float4 In_Rotation, float2 In_Extents, int In_NumCellsX, int In_NumCellsY, float4 In_Color);
void Grid3D_Gas_UpdateEmitter_Grid3D_Gas_Master_Emitter_Func_(inout FSimulationContext Context);
void Grid3D_Gas_MaterialControls_Grid3D_Gas_Master_Emitter_Func_(inout FSimulationContext Context);
void NiagaraScript_1267_Emitter_Func_(float3 In_VECTOR_VAR, float4x4 In_Engine_Owner_SystemWorldToLocal, float4 In_Engine_Owner_LWCTile, out float3 Out_Position, inout FSimulationContext Context);
void FindActors_Grid3D_Gas_Master_Emitter_Grid3D_RigidMesh_FindColliders_CollisionQuery_UEImpureCall(int In_InstanceData, float3 In_OverlapOrigin, float4 In_OverlapRotation, float3 In_OverlapExtent, int In_TraceChannel, bool In_SkipOverlap, out bool Out_ActorsChanged);
void Grid3D_RigidMesh_FindColliders_Grid3D_Gas_Master_Emitter_Func_(inout FSimulationContext Context);
void Grid3D_Gas_Master_Emitter_8D2D07984258BDA3573A3E97B7C63897_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void SystemState_SystemChangeState002_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result12 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result13 = In_Condition && Result12;
	int ENiagaraExecutionState_IfResult;
	int ENiagaraExecutionStateSource_IfResult;
	if(Result13)
	{
	ENiagaraExecutionState_IfResult = In_NewState;
	ENiagaraExecutionStateSource_IfResult = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult;
}

void SystemState_SystemChangeState_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result14 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result15 = In_Condition && Result14;
	int ENiagaraExecutionState_IfResult1;
	int ENiagaraExecutionStateSource_IfResult1;
	if(Result15)
	{
	ENiagaraExecutionState_IfResult1 = In_NewState;
	ENiagaraExecutionStateSource_IfResult1 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult1 = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult1 = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult1;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult1;
}

void SystemState_SystemChangeState001_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result17 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result18 = In_Condition && Result17;
	int ENiagaraExecutionState_IfResult2;
	int ENiagaraExecutionStateSource_IfResult2;
	if(Result18)
	{
	ENiagaraExecutionState_IfResult2 = In_NewState;
	ENiagaraExecutionStateSource_IfResult2 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult2 = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult2 = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult2;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult2;
}

void SystemState_Func_(inout FSimulationContext Context)
{
	bool Result = NiagaraAll(Context.Map.System.Age <= Context.Map.Engine.DeltaTime);
	Context.Map.Transient.FirstFrame = Result;
	float Constant2 = 0;
	bool Result1 = NiagaraAll(Context.Map.System.Age == Constant2);
	float Constant3 = 0.016667;
	float Result2 = max(Constants_SystemState_LoopDuration, Constant3);
	float Duration_IfResult;
	if(Result1)
	{
	Duration_IfResult = Result2;
	}
	else
	{
	Duration_IfResult = Context.Map.System.CurrentLoopDuration;
	}
	float Constant4 = 0;
	Context.Map.System.CurrentLoopDuration = Duration_IfResult;
	Context.Map.SystemState.LoopDelay = Constant4;
	float Result3 = Context.Map.System.Age + Context.Map.Engine.DeltaTime;
	float Result4 = Context.Map.Engine.DeltaTime + Context.Map.System.LoopedAge;
	float Result5 = Result4 / Context.Map.System.CurrentLoopDuration;
	int Count;
	Count = Result5;
	int Constant5 = 0;
	int Result6 = max(Count, Constant5);
	float Result7 = Result6 * Context.Map.System.CurrentLoopDuration;
	float Result8 = Result4 - Result7;
	int Constant6 = 0;
	bool Result9 = NiagaraAll(Result6 > Constant6);
	int Result10 = Result6 + Context.Map.System.LoopCount;
	Context.Map.System.Age = Result3;
	Context.Map.System.LoopedAge = Result8;
	Context.Map.Local.SystemState.LoopCountIncreased = Result9;
	Context.Map.System.LoopCount = Result10;
	float float_IfResult;
	if(Context.Map.SystemState.RecalculateDurationEachLoop)
	{
	float_IfResult = Constants_SystemState_LoopDuration;
	}
	else
	{
	float_IfResult = Context.Map.System.CurrentLoopDuration;
	}
	float CurrentLoopDuration_IfResult;
	float LoopedAge_IfResult;
	if(Context.Map.Local.SystemState.LoopCountIncreased)
	{
	CurrentLoopDuration_IfResult = float_IfResult;
	LoopedAge_IfResult = Context.Map.System.LoopedAge;
	}
	else
	{
	CurrentLoopDuration_IfResult = Context.Map.System.CurrentLoopDuration;
	LoopedAge_IfResult = Context.Map.System.LoopedAge;
	}
	Context.Map.System.CurrentLoopDuration = CurrentLoopDuration_IfResult;
	Context.Map.System.LoopedAge = LoopedAge_IfResult;
	float Result11 = Context.Map.System.LoopedAge / Context.Map.System.CurrentLoopDuration;
	Context.Map.System.NormalizedLoopAge = Result11;
	bool Constant7 = true;
	int Constant8 = 0;
	SystemState_SystemChangeState002_Func_(Context.Map.Transient.ScalabilityExecutionState, Constant7, Constant8, Context);
	int Constant9 = 3;
	bool Constant10 = false;
	int Constant11 = 3;
	SystemState_SystemChangeState_Func_(Constant9, Constant10, Constant11, Context);
	bool Constant12 = true;
	Context.Map.System.bCompleteOnInactive = Constant12;
	int Constant13 = 0;
	bool Result16 = NiagaraAll(Context.Map.Engine.Owner.ExecutionState != Constant13);
	int Constant14 = 2;
	SystemState_SystemChangeState001_Func_(Context.Map.Engine.Owner.ExecutionState, Result16, Constant14, Context);
}

void EmitterState_EmitterChangeState002_Grid3D_Gas_Master_Emitter_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant28 = 3;
	bool Result27 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState != Constant28);
	int Constant29 = 4;
	bool Result28 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState != Constant29);
	bool Result29 = Result27 && Result28;
	bool Result30 = In_Condition && Result29;
	bool Result31 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionStateSource <= In_NewStateSource);
	bool Result32 = Result30 && Result31;
	int Constant30 = 2;
	bool Result33 = NiagaraAll(In_NewState == Constant30);
	int Constant31 = 1;
	bool Result34 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState == Constant31);
	int Constant32 = 2;
	bool Result35 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState == Constant32);
	bool Result36 = Result34 || Result35;
	bool Result37 = Result33 && Result36;
	int Constant33 = 1;
	int Constant34 = (int)0;
	int ENiagaraExecutionState_SelectResult = Constant34;
	ENiagaraExecutionState_SelectResult = Constant33;
	if(Result37 == 0)
	{ 
	ENiagaraExecutionState_SelectResult = In_NewState;
	}
	int ENiagaraExecutionState_IfResult3;
	int ENiagaraExecutionStateSource_IfResult3;
	if(Result32)
	{
	ENiagaraExecutionState_IfResult3 = ENiagaraExecutionState_SelectResult;
	ENiagaraExecutionStateSource_IfResult3 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult3 = Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState;
	ENiagaraExecutionStateSource_IfResult3 = Context.Map.Grid3D_Gas_Master_Emitter.ExecutionStateSource;
	}
	Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState = ENiagaraExecutionState_IfResult3;
	Context.Map.Grid3D_Gas_Master_Emitter.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult3;
}

void EmitterState_EmitterChangeState_Grid3D_Gas_Master_Emitter_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant37 = 3;
	bool Result38 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState != Constant37);
	int Constant38 = 4;
	bool Result39 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState != Constant38);
	bool Result40 = Result38 && Result39;
	bool Result41 = In_Condition && Result40;
	bool Result42 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionStateSource <= In_NewStateSource);
	bool Result43 = Result41 && Result42;
	int Constant39 = 2;
	bool Result44 = NiagaraAll(In_NewState == Constant39);
	int Constant40 = 1;
	bool Result45 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState == Constant40);
	int Constant41 = 2;
	bool Result46 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState == Constant41);
	bool Result47 = Result45 || Result46;
	bool Result48 = Result44 && Result47;
	int Constant42 = 1;
	int Constant43 = (int)0;
	int ENiagaraExecutionState_SelectResult1 = Constant43;
	ENiagaraExecutionState_SelectResult1 = Constant42;
	if(Result48 == 0)
	{ 
	ENiagaraExecutionState_SelectResult1 = In_NewState;
	}
	int ENiagaraExecutionState_IfResult4;
	int ENiagaraExecutionStateSource_IfResult4;
	if(Result43)
	{
	ENiagaraExecutionState_IfResult4 = ENiagaraExecutionState_SelectResult1;
	ENiagaraExecutionStateSource_IfResult4 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult4 = Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState;
	ENiagaraExecutionStateSource_IfResult4 = Context.Map.Grid3D_Gas_Master_Emitter.ExecutionStateSource;
	}
	Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState = ENiagaraExecutionState_IfResult4;
	Context.Map.Grid3D_Gas_Master_Emitter.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult4;
}

void EmitterState_EmitterChangeState005_Grid3D_Gas_Master_Emitter_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant48 = 3;
	bool Result52 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState != Constant48);
	int Constant49 = 4;
	bool Result53 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState != Constant49);
	bool Result54 = Result52 && Result53;
	bool Result55 = In_Condition && Result54;
	bool Result56 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionStateSource <= In_NewStateSource);
	bool Result57 = Result55 && Result56;
	int Constant50 = 2;
	bool Result58 = NiagaraAll(In_NewState == Constant50);
	int Constant51 = 1;
	bool Result59 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState == Constant51);
	int Constant52 = 2;
	bool Result60 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState == Constant52);
	bool Result61 = Result59 || Result60;
	bool Result62 = Result58 && Result61;
	int Constant53 = 1;
	int Constant54 = (int)0;
	int ENiagaraExecutionState_SelectResult2 = Constant54;
	ENiagaraExecutionState_SelectResult2 = Constant53;
	if(Result62 == 0)
	{ 
	ENiagaraExecutionState_SelectResult2 = In_NewState;
	}
	int ENiagaraExecutionState_IfResult5;
	int ENiagaraExecutionStateSource_IfResult5;
	if(Result57)
	{
	ENiagaraExecutionState_IfResult5 = ENiagaraExecutionState_SelectResult2;
	ENiagaraExecutionStateSource_IfResult5 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult5 = Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState;
	ENiagaraExecutionStateSource_IfResult5 = Context.Map.Grid3D_Gas_Master_Emitter.ExecutionStateSource;
	}
	Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState = ENiagaraExecutionState_IfResult5;
	Context.Map.Grid3D_Gas_Master_Emitter.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult5;
}

void EmitterState_EmitterChangeState003_Grid3D_Gas_Master_Emitter_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant59 = 3;
	bool Result67 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState != Constant59);
	int Constant60 = 4;
	bool Result68 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState != Constant60);
	bool Result69 = Result67 && Result68;
	bool Result70 = In_Condition && Result69;
	bool Result71 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionStateSource <= In_NewStateSource);
	bool Result72 = Result70 && Result71;
	int Constant61 = 2;
	bool Result73 = NiagaraAll(In_NewState == Constant61);
	int Constant62 = 1;
	bool Result74 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState == Constant62);
	int Constant63 = 2;
	bool Result75 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState == Constant63);
	bool Result76 = Result74 || Result75;
	bool Result77 = Result73 && Result76;
	int Constant64 = 1;
	int Constant65 = (int)0;
	int ENiagaraExecutionState_SelectResult3 = Constant65;
	ENiagaraExecutionState_SelectResult3 = Constant64;
	if(Result77 == 0)
	{ 
	ENiagaraExecutionState_SelectResult3 = In_NewState;
	}
	int ENiagaraExecutionState_IfResult6;
	int ENiagaraExecutionStateSource_IfResult6;
	if(Result72)
	{
	ENiagaraExecutionState_IfResult6 = ENiagaraExecutionState_SelectResult3;
	ENiagaraExecutionStateSource_IfResult6 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult6 = Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState;
	ENiagaraExecutionStateSource_IfResult6 = Context.Map.Grid3D_Gas_Master_Emitter.ExecutionStateSource;
	}
	Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState = ENiagaraExecutionState_IfResult6;
	Context.Map.Grid3D_Gas_Master_Emitter.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult6;
}

void EmitterState_Grid3D_Gas_Master_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result19 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.Age <= Context.Map.Engine.DeltaTime);
	Context.Map.Transient.FirstFrame = Result19;
	Context.Map.Local.EmitterState.PreviousEmitterState = Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState;
	float Constant15 = 65500;
	Context.Map.Local.EmitterState.LoopDuration = Constant15;
	float Constant16 = 0;
	bool Result20 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.Age == Constant16);
	float Duration_IfResult1;
	if(Result20)
	{
	Duration_IfResult1 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	Duration_IfResult1 = Context.Map.Grid3D_Gas_Master_Emitter.CurrentLoopDuration;
	}
	float Constant17 = 0;
	Context.Map.Grid3D_Gas_Master_Emitter.CurrentLoopDuration = Duration_IfResult1;
	Context.Map.EmitterState.LoopDelay = Constant17;
	float Result21 = Context.Map.Grid3D_Gas_Master_Emitter.Age + Context.Map.Engine.DeltaTime;
	float Result22 = Context.Map.Engine.DeltaTime + Context.Map.Grid3D_Gas_Master_Emitter.LoopedAge;
	bool Result23 = NiagaraAll(Result22 >= Context.Map.Grid3D_Gas_Master_Emitter.CurrentLoopDuration);
	int Constant18 = 0;
	Context.Map.Grid3D_Gas_Master_Emitter.Age = Result21;
	Context.Map.Grid3D_Gas_Master_Emitter.LoopedAge = Result22;
	Context.Map.Local.EmitterState.LoopCountIncreased = Result23;
	Context.Map.Grid3D_Gas_Master_Emitter.LoopCount = Constant18;
	bool Constant19 = false;
	int Constant20 = 0;
	Context.Map.Local.EmitterState.LoopCountIncreased = Constant19;
	Context.Map.Grid3D_Gas_Master_Emitter.LoopCount = Constant20;
	float Constant21 = 0;
	float Duration_IfResult2;
	float LoopedAge_IfResult1;
	if(Context.Map.Local.EmitterState.LoopCountIncreased)
	{
	Duration_IfResult2 = Context.Map.Local.EmitterState.LoopDuration;
	LoopedAge_IfResult1 = Constant21;
	}
	else
	{
	Duration_IfResult2 = Context.Map.Grid3D_Gas_Master_Emitter.CurrentLoopDuration;
	LoopedAge_IfResult1 = Context.Map.Grid3D_Gas_Master_Emitter.LoopedAge;
	}
	Context.Map.Grid3D_Gas_Master_Emitter.CurrentLoopDuration = Duration_IfResult2;
	Context.Map.Grid3D_Gas_Master_Emitter.LoopedAge = LoopedAge_IfResult1;
	float Constant22 = 0;
	Context.Map.Grid3D_Gas_Master_Emitter.NormalizedLoopAge = Constant22;
	float Constant23 = 0;
	float Constant24 = 1.0001;
	float Result24 = clamp(Context.Map.Engine.Owner.LODDistanceFraction,Constant23,Constant24);
	Context.Map.Grid3D_Gas_Master_Emitter.Scalability.DistanceFraction = Result24;
	int Constant25 = 0;
	Context.Map.Transient.ScalabilityEmitterExecutionState = Constant25;
	int Constant26 = 0;
	bool Result25 = NiagaraAll(Context.Map.Engine.Grid3D_Gas_Master_Emitter.NumParticles == Constant26);
	Context.Map.Local.EmitterState.NoActiveEmitterParticles = Result25;
	int Constant27 = 0;
	bool Result26 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant27);
	EmitterState_EmitterChangeState002_Grid3D_Gas_Master_Emitter_Func_(Context.Map.System.ExecutionState, Result26, Context.Map.System.ExecutionStateSource, Context);
	int Constant35 = 1;
	int Constant36 = 1;
	EmitterState_EmitterChangeState_Grid3D_Gas_Master_Emitter_Func_(Constant35, Context.Map.Local.EmitterState.LoopCountIncreased, Constant36, Context);
	int Constant44 = 1;
	int Constant45 = 0;
	bool Result49 = NiagaraAll(Context.Map.System.ExecutionState != Constant45);
	int Constant46 = 2;
	bool Result50 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant46);
	bool Result51 = Result49 && Result50;
	int Constant47 = 1;
	EmitterState_EmitterChangeState005_Grid3D_Gas_Master_Emitter_Func_(Constant44, Result51, Constant47, Context);
	int Constant55 = 3;
	int Constant56 = 0;
	bool Result63 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState != Constant56);
	int Constant57 = 0;
	bool Result64 = NiagaraAll(Context.Map.Grid3D_Gas_Master_Emitter.ExecutionStateSource != Constant57);
	bool Result65 = Result63 && Result64;
	bool Result66 = Context.Map.Local.EmitterState.NoActiveEmitterParticles && Result65;
	int Constant58 = 3;
	EmitterState_EmitterChangeState003_Grid3D_Gas_Master_Emitter_Func_(Constant55, Result66, Constant58, Context);
	float3 Result78 = Context.Map.Engine.Owner.Velocity * Context.Map.Engine.DeltaTime;
	float Result79 = length(Result78);
	float Constant66 = 1e+08;
	float Result80 = Modulo(Context.Map.Grid3D_Gas_Master_Emitter.DistanceTraveled, Constant66);
	float Result81 = Result79 + Result80;
	Context.Map.Grid3D_Gas_Master_Emitter.DistanceTraveled = Result81;
}

void CustomHlsl3708683E413FCB14951AE2AB5BE10E2B_Func_(out float3 Out_CustomHLSLOutput, inout FSimulationContext Context)
{

Out_CustomHLSLOutput = (float3)(float3(0.0, 0.0, (0.5 + Context.Map.User.WorldSpaceSize.Z)) );
	
}

void CustomHlsl0015F01A0CD4AE6CF31AC2812971C9629C2_Func_(float3 In_Scale, out float4x4 Out_ScaleMatrix)
{

Out_ScaleMatrix = float4x4(
			float4(In_Scale.x, 0.0f, 0.0f, 0.0f),
			float4(0.0f, In_Scale.y, 0.0f, 0.0f),
			float4(0.0f, 0.0f, In_Scale.z, 0.0f),
			float4(0.0f, 0.0f, 0.0f, 1.0f));
}

void CustomHlsl0014FA6C40644C15067A10682A1878D5D7D_Func_(float3 In_Scale, out float4x4 Out_InvScaleMatrix)
{

Out_InvScaleMatrix = float4x4(
			float4(1./In_Scale.x, 0.0f, 0.0f, 0.0f),
			float4(0.0f, 1./In_Scale.y, 0.0f, 0.0f),
			float4(0.0f, 0.0f, 1./In_Scale.z, 0.0f),
			float4(0.0f, 0.0f, 0.0f, 1.0f));
}

void CustomHlsl57F9E64049637B678A890180D6B11CE8_Func_(float4x4 In_T, float4x4 In_S, out float4x4 Out_ret)
{

Out_ret = mul(In_T,In_S);
}

void CustomHlsl9267E60445E9C69AC182B1969B11DE37_Func_(float4x4 In_T, float4x4 In_S, out float4x4 Out_ret)
{

Out_ret = mul(In_S,In_T);
}

void CustomHlsl466FA4C248473D69F0E41F9320316C4F_Func_(float4x4 In_UnitToLocal, float4x4 In_LocalToWorld, out float4x4 Out_ret)
{

Out_ret = mul(In_UnitToLocal, In_LocalToWorld);
}

void NiagaraScript_1268_Emitter_Func_(float4 In_FLOAT4_VAR, int In_TargetChannel, out float Out_NewOutput, inout FSimulationContext Context)
{
	float X;
	float Y;
	float Z;
	float W;
	X = In_FLOAT4_VAR.x;
	Y = In_FLOAT4_VAR.y;
	Z = In_FLOAT4_VAR.z;
	W = In_FLOAT4_VAR.w;
	float Constant82 = (0.0);
	float NiagaraFloat_SelectResult4 = Constant82;
	NiagaraFloat_SelectResult4 = X;
	if(In_TargetChannel == 1)
	{ 
	NiagaraFloat_SelectResult4 = Y;
	}
	if(In_TargetChannel == 2)
	{ 
	NiagaraFloat_SelectResult4 = Z;
	}
	if(In_TargetChannel == 3)
	{ 
	NiagaraFloat_SelectResult4 = W;
	}
	Out_NewOutput = NiagaraFloat_SelectResult4;
}

void NiagaraScript_1271_Emitter_Func_(float3 In_Position, float4x4 In_Engine_Owner_SystemLocalToWorld, float4 In_Engine_Owner_LWCTile, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 Output14;
	Output14.x = Context.Map.Engine.Owner.LWCTile.x;
	Output14.y = Context.Map.Engine.Owner.LWCTile.y;
	Output14.z = Context.Map.Engine.Owner.LWCTile.z;
	int Constant81 = 3;
	float NiagaraScript_1268_Emitter_Func_Output_NewOutput;
	NiagaraScript_1268_Emitter_Func_(Context.Map.Engine.Owner.LWCTile, Constant81, NiagaraScript_1268_Emitter_Func_Output_NewOutput, Context);
	float3 Result87 = Output14 * NiagaraScript_1268_Emitter_Func_Output_NewOutput;
	float3 Output15;
	Output15.x = In_Position.x;
	Output15.y = In_Position.y;
	Output15.z = In_Position.z;
	float3 Result88 = Result87 + Output15;
	Out_Vector = Result88;
}

void CustomHlslD5ADE620499158F8D6317C9F7CBF9DD5_Func_(float4x4 In_WorldToLocal, float4x4 In_LocalToUnit, out float4x4 Out_ret)
{

Out_ret = mul(In_WorldToLocal, In_LocalToUnit);
}

void NiagaraScript_1272_Func_(float4x4 In_MATRIX_VAR, out float3 Out_Scale, inout FSimulationContext Context)
{
	float4 Row0;
	float4 Row1;
	float4 Row2;
	float4 Row3;
	Row0 = In_MATRIX_VAR[0];
	Row1 = In_MATRIX_VAR[1];
	Row2 = In_MATRIX_VAR[2];
	Row3 = In_MATRIX_VAR[3];
	float Result91 = length(Row0);
	float Result92 = length(Row1);
	float Result93 = length(Row2);
	float3 Output16;
	Output16.x = Result91;
	Output16.y = Result92;
	Output16.z = Result93;
	Out_Scale = Output16;
}

void NiagaraScript_1264_Emitter_Func_(float In_Value, out float Out_ClampedValue, inout FSimulationContext Context)
{
	float Constant91 = 0;
	float Constant92 = 1;
	float Result96 = clamp(In_Value,Constant91,Constant92);
	Out_ClampedValue = Result96;
}

void NiagaraScript_1275_Emitter_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_(float In_Angle, out float Out_ConvertedAngle, inout FSimulationContext Context)
{
	float Constant97 = 360;
	float Result98 = In_Angle / Constant97;
	Out_ConvertedAngle = Result98;
}

void CustomHlslE4749C3F466E2F628A8C8D8EC6986A01_Func_(float In_Roll, float In_Pitch, float In_Yaw, out float4 Out_RotationQuat)
{

	float ModulationValue = 3.1415927;
	
		float SP = sin(In_Pitch*ModulationValue);
		float SY = sin(In_Yaw*ModulationValue);
		float SR = sin(In_Roll*ModulationValue);
		float CP = cos(In_Pitch*ModulationValue);
		float CY = cos(In_Yaw*ModulationValue);
		float CR = cos(In_Roll*ModulationValue);
	
		Out_RotationQuat.x =  CR*SP*SY - SR*CP*CY;
		Out_RotationQuat.y = -CR*SP*CY - SR*CP*SY;
		Out_RotationQuat.z =  CR*CP*SY - SR*SP*CY;
		Out_RotationQuat.w =  CR*CP*CY + SR*SP*SY;
	
}

void NiagaraScript_1274_AngleInput_NewEnumerator0_Func_(float In_X, float In_Y, float In_Z, out float4 Out_Quaternion, inout FSimulationContext Context)
{
	float NiagaraScript_1275_Emitter_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_Output_ConvertedAngle;
	NiagaraScript_1275_Emitter_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_(In_X, NiagaraScript_1275_Emitter_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_Output_ConvertedAngle, Context);
	float NiagaraScript_1275_Emitter_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_Output_ConvertedAngle1;
	NiagaraScript_1275_Emitter_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_(In_Y, NiagaraScript_1275_Emitter_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_Output_ConvertedAngle1, Context);
	float NiagaraScript_1275_Emitter_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_Output_ConvertedAngle2;
	NiagaraScript_1275_Emitter_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_(In_Z, NiagaraScript_1275_Emitter_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_Output_ConvertedAngle2, Context);
	float4 CustomHlslE4749C3F466E2F628A8C8D8EC6986A01_Func_Output_RotationQuat;
	CustomHlslE4749C3F466E2F628A8C8D8EC6986A01_Func_(NiagaraScript_1275_Emitter_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_Output_ConvertedAngle, NiagaraScript_1275_Emitter_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_Output_ConvertedAngle1, NiagaraScript_1275_Emitter_AngleInput_NewEnumerator0_AngleOutput_NewEnumerator1_Func_Output_ConvertedAngle2, CustomHlslE4749C3F466E2F628A8C8D8EC6986A01_Func_Output_RotationQuat);
	Out_Quaternion = CustomHlslE4749C3F466E2F628A8C8D8EC6986A01_Func_Output_RotationQuat;
}

void CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(float4 In_Quat1, float4 In_Quat2, out float4 Out_Result)
{

float4 SIGN_MASK0 = float4( 1.f, -1.f, 1.f, -1.f );
	float4 SIGN_MASK1 = float4( 1.f, 1.f, -1.f, -1.f );
	float4 SIGN_MASK2 = float4( -1.f, 1.f, 1.f, -1.f );
	Out_Result = (In_Quat1.wwww * In_Quat2);
	Out_Result = ((In_Quat1.xxxx * In_Quat2.wzyx) * SIGN_MASK0) + Out_Result;
	Out_Result = ((In_Quat1.yyyy * In_Quat2.zwxy)* SIGN_MASK1) + Out_Result;
	Out_Result = ((In_Quat1.zzzz * In_Quat2.yxwz)* SIGN_MASK2) + Out_Result;
}

void NiagaraScript_1273_Func_(float4 In_QuaternionA, float4 In_QuaternionB, out float4 Out_Quaternion, inout FSimulationContext Context)
{
	float4 CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result;
	CustomHlsl001624D816540ECD5F976902A85E139007C_Func_(In_QuaternionA, In_QuaternionB, CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result);
	Out_Quaternion = CustomHlsl001624D816540ECD5F976902A85E139007C_Func_Output_Result;
}

void Grid3D_Gas_UpdateEmitter_Grid3D_Gas_Master_Emitter_Func_(inout FSimulationContext Context)
{
	Context.Map.Grid3D_Gas_UpdateEmitter.DeltaTime = Context.Map.Engine.DeltaTime;
	Context.Map.Grid3D_Gas_Master_Emitter.gravity = Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_UpdateEmitter_Gravity;
	Context.Map.Grid3D_Gas_Master_Emitter.dt = Context.Map.Grid3D_Gas_UpdateEmitter.DeltaTime;
	
	int Constant67 = 1;
	
	Context.Map.Grid3D_Gas_Master_Emitter.CompensateForActorMotion = Constant67;
	Context.Map.Grid3D_Gas_Master_Emitter.Owner.PreviousVelocity = Context.Map.Grid3D_Gas_Master_Emitter.Owner.Velocity;
	Context.Map.Grid3D_Gas_Master_Emitter.Owner.Velocity = Context.Map.Engine.Owner.Velocity;
	float3 Result82 = Context.Map.Grid3D_Gas_Master_Emitter.Owner.Velocity - Context.Map.Grid3D_Gas_Master_Emitter.Owner.PreviousVelocity;
	float3 Result83 = Result82 / Context.Map.Grid3D_Gas_Master_Emitter.dt;
	Context.Map.Grid3D_Gas_Master_Emitter.Owner.Acceleration = Result83;
	float4x4 CustomHlsl0015F01A0CD4AE6CF31AC2812971C9629C2_Func_Output_ScaleMatrix;
	CustomHlsl0015F01A0CD4AE6CF31AC2812971C9629C2_Func_(Context.Map.Grid3D_Gas_Master_Emitter.WorldGridExtents, CustomHlsl0015F01A0CD4AE6CF31AC2812971C9629C2_Func_Output_ScaleMatrix);
	float4x4 CustomHlsl0014FA6C40644C15067A10682A1878D5D7D_Func_Output_InvScaleMatrix;
	CustomHlsl0014FA6C40644C15067A10682A1878D5D7D_Func_(Context.Map.Grid3D_Gas_Master_Emitter.WorldGridExtents, CustomHlsl0014FA6C40644C15067A10682A1878D5D7D_Func_Output_InvScaleMatrix);
	Context.Map.Local.Grid3D_Gas_UpdateEmitter.ScaleMatrix = CustomHlsl0015F01A0CD4AE6CF31AC2812971C9629C2_Func_Output_ScaleMatrix;
	Context.Map.Local.Grid3D_Gas_UpdateEmitter.InvScaleMatrix = CustomHlsl0014FA6C40644C15067A10682A1878D5D7D_Func_Output_InvScaleMatrix;
	float4 Constant68 = float4(1,0,0,0);
	float4 Constant69 = float4(0,1,0,0);
	float4 Constant70 = float4(0,0,1,0);
	float3 Constant71 = float3(0.5,0.5,0.5);
	float3 Result84 = Constant71 - Context.Map.Grid3D_Gas_UpdateEmitter.LocalPivot;
	float3 Result85 = -(Result84);
	float Constant72 = 1;
	float4 Output1;
	Output1.x = Result85.x;
	Output1.y = Result85.y;
	Output1.z = Result85.z;
	Output1.w = Constant72;
	float4x4 Output11;
	Output11[0] = Constant68;
	Output11[1] = Constant69;
	Output11[2] = Constant70;
	Output11[3] = Output1;
	float4 Constant73 = float4(1,0,0,0);
	float4 Constant74 = float4(0,1,0,0);
	float4 Constant75 = float4(0,0,1,0);
	float Constant76 = 1;
	float4 Output12;
	Output12.x = Result84.x;
	Output12.y = Result84.y;
	Output12.z = Result84.z;
	Output12.w = Constant76;
	float4x4 Output13;
	Output13[0] = Constant73;
	Output13[1] = Constant74;
	Output13[2] = Constant75;
	Output13[3] = Output12;
	bool Constant77 = false;
	Context.Map.Local.Grid3D_Gas_UpdateEmitter.LocalTranslationMatrix = Output11;
	Context.Map.Local.Grid3D_Gas_UpdateEmitter.InvLocalTranslationMatrix = Output13;
	Context.Map.Grid3D_Gas_Master_Emitter.LocalPivot = Result84;
	
	Context.Map.Grid3D_Gas_Master_Emitter.UseLegacyTransform = Constant77;
	float4x4 CustomHlsl57F9E64049637B678A890180D6B11CE8_Func_Output_ret;
	CustomHlsl57F9E64049637B678A890180D6B11CE8_Func_(Context.Map.Local.Grid3D_Gas_UpdateEmitter.LocalTranslationMatrix, Context.Map.Local.Grid3D_Gas_UpdateEmitter.ScaleMatrix, CustomHlsl57F9E64049637B678A890180D6B11CE8_Func_Output_ret);
	float4x4 CustomHlsl9267E60445E9C69AC182B1969B11DE37_Func_Output_ret;
	CustomHlsl9267E60445E9C69AC182B1969B11DE37_Func_(Context.Map.Local.Grid3D_Gas_UpdateEmitter.InvLocalTranslationMatrix, Context.Map.Local.Grid3D_Gas_UpdateEmitter.InvScaleMatrix, CustomHlsl9267E60445E9C69AC182B1969B11DE37_Func_Output_ret);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal = CustomHlsl57F9E64049637B678A890180D6B11CE8_Func_Output_ret;
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit = CustomHlsl9267E60445E9C69AC182B1969B11DE37_Func_Output_ret;
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld = Context.Map.Engine.Owner.SystemLocalToWorld;
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal = Context.Map.Engine.Owner.SystemWorldToLocal;
	float4x4 CustomHlsl466FA4C248473D69F0E41F9320316C4F_Func_Output_ret;
	CustomHlsl466FA4C248473D69F0E41F9320316C4F_Func_(Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld, CustomHlsl466FA4C248473D69F0E41F9320316C4F_Func_Output_ret);
	float3 Constant78 = float3(0.5,0.5,0.5);
	float3 Result86 = mul(float4(Constant78,1.0),CustomHlsl466FA4C248473D69F0E41F9320316C4F_Func_Output_ret).xyz;
	float4x4 Constant79 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	float4 Constant80 = float4(0,0,0,0);
	float3 NiagaraScript_1271_Emitter_Func_Output_Vector;
	NiagaraScript_1271_Emitter_Func_(Result86, Constant79, Constant80, NiagaraScript_1271_Emitter_Func_Output_Vector, Context);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld = CustomHlsl466FA4C248473D69F0E41F9320316C4F_Func_Output_ret;
	Context.Map.Grid3D_Gas_Master_Emitter.GridCenterPosition = NiagaraScript_1271_Emitter_Func_Output_Vector;
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit = Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit;
	float4x4 CustomHlslD5ADE620499158F8D6317C9F7CBF9DD5_Func_Output_ret;
	CustomHlslD5ADE620499158F8D6317C9F7CBF9DD5_Func_(Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit, CustomHlslD5ADE620499158F8D6317C9F7CBF9DD5_Func_Output_ret);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit = CustomHlslD5ADE620499158F8D6317C9F7CBF9DD5_Func_Output_ret;
	bool Constant83 = true;
	bool Constant84 = true;
	float3 Constant85 = float3(0,0,0);
	float3 Result89 = mul(float4(Constant85,1.0),Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal).xyz;
	float3 Constant86 = float3(1,1,1);
	float3 Result90 = mul(float4(Constant86,1.0),Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal).xyz;
	SetFixedBounds_Grid3D_Gas_Master_Emitter_Grid3D_Gas_UpdateEmitter_EmitterProperties_UEImpureCall(0, Constant83, Constant84, Result89, Result90);
	float3 NiagaraScript_1272_Func_Output_Scale;
	NiagaraScript_1272_Func_(Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld, NiagaraScript_1272_Func_Output_Scale, Context);
	float3 Constant87 = float3(0.5,0.5,0.5);
	float3 Result94 = NiagaraScript_1272_Func_Output_Scale * Constant87;
	Context.Map.Local.Grid3D_Gas_UpdateEmitter.Extents = Result94;
	float3 Constant88 = float3(0.5,0.5,0.5);
	float3 Result95 = mul(float4(Constant88,1.0),Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld).xyz;
	float4 Constant89 = float4(1,0,0,1);
	DrawBox_Grid3D_Gas_Master_Emitter_DebugDraw_UEImpureCall(1, Context.Map.Grid3D_Gas_UpdateEmitter.DrawGridBounds, Result95, Context.Map.Engine.Owner.Rotation, Context.Map.Local.Grid3D_Gas_UpdateEmitter.Extents, Constant89);
	float Constant90 = 0.5;
	float NiagaraScript_1264_Emitter_Func_Output_ClampedValue;
	NiagaraScript_1264_Emitter_Func_(Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_UpdateEmitter_ResolutionGridOffset, NiagaraScript_1264_Emitter_Func_Output_ClampedValue, Context);
	float Constant93 = 0.5;
	float3 Output17;
	Output17.x = Constant90;
	Output17.y = NiagaraScript_1264_Emitter_Func_Output_ClampedValue;
	Output17.z = Constant93;
	float3 Result97 = mul(float4(Output17,1.0),Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld).xyz;
	Context.Map.Local.Grid3D_Gas_UpdateEmitter.GridCenter = Result97;
	float X1;
	float Y1;
	float Z1;
	X1 = Context.Map.Local.Grid3D_Gas_UpdateEmitter.Extents.x;
	Y1 = Context.Map.Local.Grid3D_Gas_UpdateEmitter.Extents.y;
	Z1 = Context.Map.Local.Grid3D_Gas_UpdateEmitter.Extents.z;
	float2 Output18;
	Output18.x = X1;
	Output18.y = Z1;
	Context.Map.Local.Grid3D_Gas_UpdateEmitter.GridExtents = Output18;
	float Constant94 = 90;
	float Constant95 = 0;
	float Constant96 = 0;
	float4 NiagaraScript_1274_AngleInput_NewEnumerator0_Func_Output_Quaternion;
	NiagaraScript_1274_AngleInput_NewEnumerator0_Func_(Constant94, Constant95, Constant96, NiagaraScript_1274_AngleInput_NewEnumerator0_Func_Output_Quaternion, Context);
	float4 NiagaraScript_1273_Func_Output_Quaternion;
	NiagaraScript_1273_Func_(Context.Map.Engine.Owner.Rotation, NiagaraScript_1274_AngleInput_NewEnumerator0_Func_Output_Quaternion, NiagaraScript_1273_Func_Output_Quaternion, Context);
	Context.Map.Local.Grid3D_Gas_UpdateEmitter.GridRotation = NiagaraScript_1273_Func_Output_Quaternion;
	Context.Map.Grid3D_Gas_UpdateEmitter.NumCellsX = Context.Map.Grid3D_Gas_Master_Emitter.NumCellsXVelocity;
	Context.Map.Grid3D_Gas_UpdateEmitter.NumCellsY = Context.Map.Grid3D_Gas_Master_Emitter.NumCellsYVelocity;
	Context.Map.Grid3D_Gas_UpdateEmitter.NumCellsZ = Context.Map.Grid3D_Gas_Master_Emitter.NumCellsZVelocity;
	Context.Map.Local.Grid3D_Gas_UpdateEmitter.GridCellsX = Context.Map.Grid3D_Gas_UpdateEmitter.NumCellsX;
	Context.Map.Local.Grid3D_Gas_UpdateEmitter.GridCellsY = Context.Map.Grid3D_Gas_UpdateEmitter.NumCellsZ;
	float4 Constant98 = float4(0.5,0,0,1);
	DrawGrid2D_Grid3D_Gas_Master_Emitter_DebugDraw_UEImpureCall(1, Context.Map.Grid3D_Gas_UpdateEmitter.DrawResolutionGrid, Context.Map.Local.Grid3D_Gas_UpdateEmitter.GridCenter, Context.Map.Local.Grid3D_Gas_UpdateEmitter.GridRotation, Context.Map.Local.Grid3D_Gas_UpdateEmitter.GridExtents, Context.Map.Local.Grid3D_Gas_UpdateEmitter.GridCellsX, Context.Map.Local.Grid3D_Gas_UpdateEmitter.GridCellsY, Constant98);
}

void Grid3D_Gas_MaterialControls_Grid3D_Gas_Master_Emitter_Func_(inout FSimulationContext Context)
{
	
	int Constant99 = 1;
	
	int Constant100 = 1;
	
	int Constant101 = 0;
	float X2;
	float Y2;
	X2 = Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_DensityRange.x;
	Y2 = Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_DensityRange.y;
	float Result99 = Y2 - X2;
	float X3;
	float Y3;
	X3 = Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_TemperatureRange.x;
	Y3 = Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_TemperatureRange.y;
	float Result100 = Y3 - X3;
	int Constant102 = 0;
	
	int Constant103 = 0;
	float Constant104 = 0;
	float Constant105 = (0.0);
	float DensityGain_SelectResult5 = Constant105;
	DensityGain_SelectResult5 = Constant104;
	if(Constant103 == 0)
	{ 
	DensityGain_SelectResult5 = Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_DensityGain;
	}
	int Constant106 = 0;
	
	int Constant107 = 0;
	float Constant108 = 0;
	float Constant109 = 0;
	float Constant110 = (0.0);
	float ColorGaiin_SelectResult6 = Constant110;
	float Constant111 = (0.0);
	float OpacityGain_SelectResult6 = Constant111;
	ColorGaiin_SelectResult6 = Constant108;
	OpacityGain_SelectResult6 = Constant109;
	if(Constant107 == 0)
	{ 
	ColorGaiin_SelectResult6 = Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_TemperatureColorGain;
	OpacityGain_SelectResult6 = Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_TemperatureOpacityGain;
	}
	int Constant112 = 2;
	
	int Constant113 = 0;
	int Constant114 = 1;
	
	int Constant115 = 1;
	int Constant116 = 1;
	
	int Constant117 = 0;
	Context.Map.Grid3D_Gas_Master_Emitter.RenderDensityRange = Result99;
	Context.Map.Grid3D_Gas_Master_Emitter.RenderDensityOffset = X2;
	Context.Map.Grid3D_Gas_Master_Emitter.RenderTemperatureOffset = X3;
	Context.Map.Grid3D_Gas_Master_Emitter.RenderTemperatureRange = Result100;
	Context.Map.Grid3D_Gas_Master_Emitter.RenderDensityAlbedo = Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_DensityAlbedo;
	Context.Map.Grid3D_Gas_Master_Emitter.RenderDensityGain = DensityGain_SelectResult5;
	Context.Map.Grid3D_Gas_Master_Emitter.RenderTempColorGain = ColorGaiin_SelectResult6;
	Context.Map.Grid3D_Gas_Master_Emitter.RenderTempOpacityGain = OpacityGain_SelectResult6;
	
	Context.Map.Grid3D_Gas_Master_Emitter.RenderUseDensityCurve = Constant113;
	
	Context.Map.Grid3D_Gas_Master_Emitter.RenderUseBlackbodyCurve = Constant115;
	
	Context.Map.Grid3D_Gas_Master_Emitter.RenderUseTemperatureOpacityCurve = Constant117;
	Context.Map.Grid3D_Gas_Master_Emitter.RenderSmokeColor = Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_SmokeColor;
	Context.Map.Grid3D_Gas_Master_Emitter.RenderWriteDensityThreshold = Constants_Grid3D_Gas_Master_Emitter_Grid3D_Gas_MaterialControls_RenderWriteDensityThreshold;
}

void NiagaraScript_1267_Emitter_Func_(float3 In_VECTOR_VAR, float4x4 In_Engine_Owner_SystemWorldToLocal, float4 In_Engine_Owner_LWCTile, out float3 Out_Position, inout FSimulationContext Context)
{
	float3 Output19;
	Output19.x = Context.Map.Engine.Owner.LWCTile.x;
	Output19.y = Context.Map.Engine.Owner.LWCTile.y;
	Output19.z = Context.Map.Engine.Owner.LWCTile.z;
	int Constant121 = 3;
	float NiagaraScript_1268_Emitter_Func_Output_NewOutput1;
	NiagaraScript_1268_Emitter_Func_(Context.Map.Engine.Owner.LWCTile, Constant121, NiagaraScript_1268_Emitter_Func_Output_NewOutput1, Context);
	float3 Result101 = Output19 * NiagaraScript_1268_Emitter_Func_Output_NewOutput1;
	float3 Result102 = In_VECTOR_VAR - Result101;
	float3 NiagaraPosition;
	NiagaraPosition.x = Result102.x;
	NiagaraPosition.y = Result102.y;
	NiagaraPosition.z = Result102.z;
	Out_Position = NiagaraPosition;
}

void Grid3D_RigidMesh_FindColliders_Grid3D_Gas_Master_Emitter_Func_(inout FSimulationContext Context)
{
	
	int Constant118 = 1;
	float4x4 Constant119 = float4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);
	float4 Constant120 = float4(0,0,0,0);
	float3 NiagaraScript_1267_Emitter_Func_Output_Position;
	NiagaraScript_1267_Emitter_Func_(Context.Map.Grid3D_RigidMesh_FindColliders.GridCenterPosition, Constant119, Constant120, NiagaraScript_1267_Emitter_Func_Output_Position, Context);
	int Constant122 = 0;
	bool Constant123 = false;
	bool FindActors_Grid3D_Gas_Master_Emitter_Grid3D_RigidMesh_FindColliders_CollisionQuery_UEImpureCallOutput_ActorsChanged;
	FindActors_Grid3D_Gas_Master_Emitter_Grid3D_RigidMesh_FindColliders_CollisionQuery_UEImpureCall(2, NiagaraScript_1267_Emitter_Func_Output_Position, Context.Map.Grid3D_RigidMesh_FindColliders.GridRotation, Context.Map.Grid3D_RigidMesh_FindColliders.WorldGridExtents, Constant122, Constant123, FindActors_Grid3D_Gas_Master_Emitter_Grid3D_RigidMesh_FindColliders_CollisionQuery_UEImpureCallOutput_ActorsChanged);
	
	Context.Map.Grid3D_Gas_Master_Emitter.Grid3D_RigidMesh_FindColliders.FindColliders = Constant118;
}

void Grid3D_Gas_Master_Emitter_8D2D07984258BDA3573A3E97B7C63897_Func_(inout FSimulationContext Context)
{
	EnterStatScope(3 );
	EmitterState_Grid3D_Gas_Master_Emitter_Func_(Context);
	ExitStatScope();
	float3 CustomHlsl3708683E413FCB14951AE2AB5BE10E2B_Func_Output_CustomHLSLOutput;
	CustomHlsl3708683E413FCB14951AE2AB5BE10E2B_Func_(CustomHlsl3708683E413FCB14951AE2AB5BE10E2B_Func_Output_CustomHLSLOutput, Context);
	Context.Map.Grid3D_Gas_UpdateEmitter.DrawGridBounds = Context.Map.Grid3D_Gas_Master_Emitter.OVERRIDE.DrawBounds;
	Context.Map.Grid3D_Gas_UpdateEmitter.DrawResolutionGrid = Context.Map.Grid3D_Gas_Master_Emitter.Initial.OVERRIDE.DrawResolutionGrid;
	Context.Map.Grid3D_Gas_UpdateEmitter.LocalPivot = CustomHlsl3708683E413FCB14951AE2AB5BE10E2B_Func_Output_CustomHLSLOutput;
	EnterStatScope(4 );
	Grid3D_Gas_UpdateEmitter_Grid3D_Gas_Master_Emitter_Func_(Context);
	ExitStatScope();
	EnterStatScope(5 );
	Grid3D_Gas_MaterialControls_Grid3D_Gas_Master_Emitter_Func_(Context);
	ExitStatScope();
	Context.Map.Grid3D_RigidMesh_FindColliders.GridCenterPosition = Context.Map.Grid3D_Gas_Master_Emitter.GridCenterPosition;
	Context.Map.Grid3D_RigidMesh_FindColliders.GridRotation = Context.Map.Grid3D_Gas_Master_Emitter.GridOrientation;
	Context.Map.Grid3D_RigidMesh_FindColliders.WorldGridExtents = Context.Map.Grid3D_Gas_Master_Emitter.WorldGridExtents;
	EnterStatScope(6 );
	Grid3D_RigidMesh_FindColliders_Grid3D_Gas_Master_Emitter_Func_(Context);
	ExitStatScope();
}

float GetSpawnInterpolation()
{
	return 1.0f;}



void HandlePreviousValuesForSpawn(inout FSimulationContext Context)
{
}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );
	
	
	bool Constant = false;
	Context.Map.SystemState.RecalculateDurationEachLoop = Constant;
	int Constant1 = 0;
	Context.Map.Transient.ScalabilityExecutionState = Constant1;
	EnterStatScope(1 );
	SystemState_Func_(Context);
	ExitStatScope();
	EnterStatScope(2 );
	Grid3D_Gas_Master_Emitter_8D2D07984258BDA3573A3E97B7C63897_Func_(Context);
	ExitStatScope();
	ExitStatScope();
}
void SimulateMain()
{
EnterStatScope(7 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Emitter.RandomSeed = InputDataInt(0, 0);
	Context.Map.Grid3D_Gas_Master_Emitter.Age = InputDataFloat(0, 0);
	Context.Map.Grid3D_Gas_Master_Emitter.CurrentLoopDuration = InputDataFloat(0, 1);
	Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceAxis.x = InputDataFloat(0, 2);
	Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceAxis.y = InputDataFloat(0, 3);
	Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceAxis.z = InputDataFloat(0, 4);
	Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceCenter.x = InputDataFloat(0, 5);
	Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceCenter.y = InputDataFloat(0, 6);
	Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceCenter.z = InputDataFloat(0, 7);
	Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceRemapRangeMax = InputDataFloat(0, 8);
	Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceRemapRangeMin = InputDataFloat(0, 9);
	Context.Map.Grid3D_Gas_Master_Emitter.DebugVectorSliceCellOffset = InputDataInt(0, 1);
	Context.Map.Grid3D_Gas_Master_Emitter.DebugVectorSliceScale = InputDataFloat(0, 10);
	Context.Map.Grid3D_Gas_Master_Emitter.DistanceTraveled = InputDataFloat(0, 11);
	Context.Map.Grid3D_Gas_Master_Emitter.dt = InputDataFloat(0, 12);
	Context.Map.Grid3D_Gas_Master_Emitter.dx = InputDataFloat(0, 13);
	Context.Map.Grid3D_Gas_Master_Emitter.dx_render = InputDataFloat(0, 14);
	Context.Map.Grid3D_Gas_Master_Emitter.dx_scalars = InputDataFloat(0, 15);
	Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState = InputDataInt(0, 2);
	Context.Map.Grid3D_Gas_Master_Emitter.ExecutionStateSource = InputDataInt(0, 3);
	Context.Map.Grid3D_Gas_Master_Emitter.gravity.x = InputDataFloat(0, 16);
	Context.Map.Grid3D_Gas_Master_Emitter.gravity.y = InputDataFloat(0, 17);
	Context.Map.Grid3D_Gas_Master_Emitter.gravity.z = InputDataFloat(0, 18);
	Context.Map.Grid3D_Gas_Master_Emitter.Grid3D_Gas_QualityOverrides.QualityOverride = InputDataInt(0, 4);
	Context.Map.Grid3D_Gas_Master_Emitter.GridCenterPosition.x = InputDataFloat(0, 19);
	Context.Map.Grid3D_Gas_Master_Emitter.GridCenterPosition.y = InputDataFloat(0, 20);
	Context.Map.Grid3D_Gas_Master_Emitter.GridCenterPosition.z = InputDataFloat(0, 21);
	Context.Map.Grid3D_Gas_Master_Emitter.GridOrientation.x = InputDataFloat(0, 22);
	Context.Map.Grid3D_Gas_Master_Emitter.GridOrientation.y = InputDataFloat(0, 23);
	Context.Map.Grid3D_Gas_Master_Emitter.GridOrientation.z = InputDataFloat(0, 24);
	Context.Map.Grid3D_Gas_Master_Emitter.GridOrientation.w = InputDataFloat(0, 25);
	Context.Map.Grid3D_Gas_Master_Emitter.Initial.OVERRIDE.DrawResolutionGrid = InputDataBool(0, 5);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalPivot.x = InputDataFloat(0, 26);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalPivot.y = InputDataFloat(0, 27);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalPivot.z = InputDataFloat(0, 28);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalSpaceParticleSource = InputDataBool(0, 6);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[0][0] = InputDataFloat(0, 29);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[0][1] = InputDataFloat(0, 30);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[0][2] = InputDataFloat(0, 31);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[0][3] = InputDataFloat(0, 32);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[1][0] = InputDataFloat(0, 33);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[1][1] = InputDataFloat(0, 34);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[1][2] = InputDataFloat(0, 35);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[1][3] = InputDataFloat(0, 36);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[2][0] = InputDataFloat(0, 37);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[2][1] = InputDataFloat(0, 38);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[2][2] = InputDataFloat(0, 39);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[2][3] = InputDataFloat(0, 40);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[3][0] = InputDataFloat(0, 41);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[3][1] = InputDataFloat(0, 42);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[3][2] = InputDataFloat(0, 43);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[3][3] = InputDataFloat(0, 44);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[0][0] = InputDataFloat(0, 45);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[0][1] = InputDataFloat(0, 46);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[0][2] = InputDataFloat(0, 47);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[0][3] = InputDataFloat(0, 48);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[1][0] = InputDataFloat(0, 49);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[1][1] = InputDataFloat(0, 50);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[1][2] = InputDataFloat(0, 51);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[1][3] = InputDataFloat(0, 52);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[2][0] = InputDataFloat(0, 53);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[2][1] = InputDataFloat(0, 54);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[2][2] = InputDataFloat(0, 55);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[2][3] = InputDataFloat(0, 56);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[3][0] = InputDataFloat(0, 57);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[3][1] = InputDataFloat(0, 58);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[3][2] = InputDataFloat(0, 59);
	Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[3][3] = InputDataFloat(0, 60);
	Context.Map.Grid3D_Gas_Master_Emitter.LoopCount = InputDataInt(0, 7);
	Context.Map.Grid3D_Gas_Master_Emitter.LoopedAge = InputDataFloat(0, 61);
	Context.Map.Grid3D_Gas_Master_Emitter.NormalizedLoopAge = InputDataFloat(0, 62);
	Context.Map.Grid3D_Gas_Master_Emitter.NumCellsMaxAxisScalar = InputDataInt(0, 8);
	Context.Map.Grid3D_Gas_Master_Emitter.NumCellsMaxAxisVelocity = InputDataInt(0, 9);
	Context.Map.Grid3D_Gas_Master_Emitter.NumCellsTotalScalar = InputDataInt(0, 10);
	Context.Map.Grid3D_Gas_Master_Emitter.NumCellsTotalVelocity = InputDataInt(0, 11);
	Context.Map.Grid3D_Gas_Master_Emitter.NumCellsXRenderTarget = InputDataInt(0, 12);
	Context.Map.Grid3D_Gas_Master_Emitter.NumCellsXScalar = InputDataInt(0, 13);
	Context.Map.Grid3D_Gas_Master_Emitter.NumCellsXVelocity = InputDataInt(0, 14);
	Context.Map.Grid3D_Gas_Master_Emitter.NumCellsYRenderTarget = InputDataInt(0, 15);
	Context.Map.Grid3D_Gas_Master_Emitter.NumCellsYScalar = InputDataInt(0, 16);
	Context.Map.Grid3D_Gas_Master_Emitter.NumCellsYVelocity = InputDataInt(0, 17);
	Context.Map.Grid3D_Gas_Master_Emitter.NumCellsZRenderTarget = InputDataInt(0, 18);
	Context.Map.Grid3D_Gas_Master_Emitter.NumCellsZScalar = InputDataInt(0, 19);
	Context.Map.Grid3D_Gas_Master_Emitter.NumCellsZVelocity = InputDataInt(0, 20);
	Context.Map.Grid3D_Gas_Master_Emitter.OVERRIDE.AttributeResolutionMultiplier = InputDataFloat(0, 63);
	Context.Map.Grid3D_Gas_Master_Emitter.OVERRIDE.DrawBounds = InputDataBool(0, 21);
	Context.Map.Grid3D_Gas_Master_Emitter.OVERRIDE.DrawResolutionGrid = InputDataBool(0, 22);
	Context.Map.Grid3D_Gas_Master_Emitter.OVERRIDE.PressureSolveIterations = InputDataInt(0, 23);
	Context.Map.Grid3D_Gas_Master_Emitter.OVERRIDE.ResolutionMaxAxis = InputDataInt(0, 24);
	Context.Map.Grid3D_Gas_Master_Emitter.Owner.Acceleration.x = InputDataFloat(0, 64);
	Context.Map.Grid3D_Gas_Master_Emitter.Owner.Acceleration.y = InputDataFloat(0, 65);
	Context.Map.Grid3D_Gas_Master_Emitter.Owner.Acceleration.z = InputDataFloat(0, 66);
	Context.Map.Grid3D_Gas_Master_Emitter.Owner.PreviousVelocity.x = InputDataFloat(0, 67);
	Context.Map.Grid3D_Gas_Master_Emitter.Owner.PreviousVelocity.y = InputDataFloat(0, 68);
	Context.Map.Grid3D_Gas_Master_Emitter.Owner.PreviousVelocity.z = InputDataFloat(0, 69);
	Context.Map.Grid3D_Gas_Master_Emitter.Owner.Velocity.x = InputDataFloat(0, 70);
	Context.Map.Grid3D_Gas_Master_Emitter.Owner.Velocity.y = InputDataFloat(0, 71);
	Context.Map.Grid3D_Gas_Master_Emitter.Owner.Velocity.z = InputDataFloat(0, 72);
	Context.Map.Grid3D_Gas_Master_Emitter.ParticleSourceGrid_Density_TemperatureIndex = InputDataInt(0, 25);
	Context.Map.Grid3D_Gas_Master_Emitter.ParticleSourceGrid_DensityIndex = InputDataInt(0, 26);
	Context.Map.Grid3D_Gas_Master_Emitter.ParticleSourceGrid_DivergenceIndex = InputDataInt(0, 27);
	Context.Map.Grid3D_Gas_Master_Emitter.ParticleSourceGrid_RGBAIndex = InputDataInt(0, 28);
	Context.Map.Grid3D_Gas_Master_Emitter.ParticleSourceGrid_TemperatureIndex = InputDataInt(0, 29);
	Context.Map.Grid3D_Gas_Master_Emitter.ParticleSourceGrid_Velocity_DivergenceIndex = InputDataInt(0, 30);
	Context.Map.Grid3D_Gas_Master_Emitter.ParticleSourceGrid_VelocityIndex = InputDataInt(0, 31);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[0][0] = InputDataFloat(0, 83);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[0][1] = InputDataFloat(0, 84);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[0][2] = InputDataFloat(0, 85);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[0][3] = InputDataFloat(0, 86);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[1][0] = InputDataFloat(0, 87);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[1][1] = InputDataFloat(0, 88);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[1][2] = InputDataFloat(0, 89);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[1][3] = InputDataFloat(0, 90);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[2][0] = InputDataFloat(0, 91);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[2][1] = InputDataFloat(0, 92);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[2][2] = InputDataFloat(0, 93);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[2][3] = InputDataFloat(0, 94);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[3][0] = InputDataFloat(0, 95);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[3][1] = InputDataFloat(0, 96);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[3][2] = InputDataFloat(0, 97);
	Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[3][3] = InputDataFloat(0, 98);
	Context.Map.Grid3D_Gas_Master_Emitter.RenderDensityAlbedo = InputDataFloat(0, 99);
	Context.Map.Grid3D_Gas_Master_Emitter.RenderDensityGain = InputDataFloat(0, 100);
	Context.Map.Grid3D_Gas_Master_Emitter.RenderDensityOffset = InputDataFloat(0, 101);
	Context.Map.Grid3D_Gas_Master_Emitter.RenderDensityRange = InputDataFloat(0, 102);
	Context.Map.Grid3D_Gas_Master_Emitter.RenderSmokeColor.r = InputDataFloat(0, 103);
	Context.Map.Grid3D_Gas_Master_Emitter.RenderSmokeColor.g = InputDataFloat(0, 104);
	Context.Map.Grid3D_Gas_Master_Emitter.RenderSmokeColor.b = InputDataFloat(0, 105);
	Context.Map.Grid3D_Gas_Master_Emitter.RenderSmokeColor.a = InputDataFloat(0, 106);
	Context.Map.Grid3D_Gas_Master_Emitter.RenderTempColorGain = InputDataFloat(0, 107);
	Context.Map.Grid3D_Gas_Master_Emitter.RenderTemperatureOffset = InputDataFloat(0, 108);
	Context.Map.Grid3D_Gas_Master_Emitter.RenderTemperatureRange = InputDataFloat(0, 109);
	Context.Map.Grid3D_Gas_Master_Emitter.RenderTempOpacityGain = InputDataFloat(0, 110);
	Context.Map.Grid3D_Gas_Master_Emitter.RenderWriteDensityThreshold = InputDataFloat(0, 111);
	Context.Map.Grid3D_Gas_Master_Emitter.Scalability.DistanceFraction = InputDataFloat(0, 112);
	Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_Density_TemperatureIndex = InputDataInt(0, 32);
	Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_DensityIndex = InputDataInt(0, 33);
	Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_PressureIndex = InputDataInt(0, 34);
	Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_RGBAIndex = InputDataInt(0, 35);
	Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_SimFloatIndex = InputDataInt(0, 36);
	Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_SolidVelocity_BoundaryIndex = InputDataInt(0, 37);
	Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_TemperatureIndex = InputDataInt(0, 38);
	Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_VelocityIndex = InputDataInt(0, 39);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[0][0] = InputDataFloat(0, 113);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[0][1] = InputDataFloat(0, 114);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[0][2] = InputDataFloat(0, 115);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[0][3] = InputDataFloat(0, 116);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[1][0] = InputDataFloat(0, 117);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[1][1] = InputDataFloat(0, 118);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[1][2] = InputDataFloat(0, 119);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[1][3] = InputDataFloat(0, 120);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[2][0] = InputDataFloat(0, 121);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[2][1] = InputDataFloat(0, 122);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[2][2] = InputDataFloat(0, 123);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[2][3] = InputDataFloat(0, 124);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[3][0] = InputDataFloat(0, 125);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[3][1] = InputDataFloat(0, 126);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[3][2] = InputDataFloat(0, 127);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[3][3] = InputDataFloat(0, 128);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[0][0] = InputDataFloat(0, 129);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[0][1] = InputDataFloat(0, 130);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[0][2] = InputDataFloat(0, 131);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[0][3] = InputDataFloat(0, 132);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[1][0] = InputDataFloat(0, 133);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[1][1] = InputDataFloat(0, 134);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[1][2] = InputDataFloat(0, 135);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[1][3] = InputDataFloat(0, 136);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[2][0] = InputDataFloat(0, 137);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[2][1] = InputDataFloat(0, 138);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[2][2] = InputDataFloat(0, 139);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[2][3] = InputDataFloat(0, 140);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[3][0] = InputDataFloat(0, 141);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[3][1] = InputDataFloat(0, 142);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[3][2] = InputDataFloat(0, 143);
	Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[3][3] = InputDataFloat(0, 144);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldCellSizeScalar.x = InputDataFloat(0, 145);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldCellSizeScalar.y = InputDataFloat(0, 146);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldCellSizeScalar.z = InputDataFloat(0, 147);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldCellSizeVelocity.x = InputDataFloat(0, 148);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldCellSizeVelocity.y = InputDataFloat(0, 149);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldCellSizeVelocity.z = InputDataFloat(0, 150);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldGridExtents.x = InputDataFloat(0, 151);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldGridExtents.y = InputDataFloat(0, 152);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldGridExtents.z = InputDataFloat(0, 153);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldRenderGridScale.x = InputDataFloat(0, 154);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldRenderGridScale.y = InputDataFloat(0, 155);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldRenderGridScale.z = InputDataFloat(0, 156);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[0][0] = InputDataFloat(0, 157);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[0][1] = InputDataFloat(0, 158);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[0][2] = InputDataFloat(0, 159);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[0][3] = InputDataFloat(0, 160);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[1][0] = InputDataFloat(0, 161);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[1][1] = InputDataFloat(0, 162);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[1][2] = InputDataFloat(0, 163);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[1][3] = InputDataFloat(0, 164);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[2][0] = InputDataFloat(0, 165);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[2][1] = InputDataFloat(0, 166);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[2][2] = InputDataFloat(0, 167);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[2][3] = InputDataFloat(0, 168);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[3][0] = InputDataFloat(0, 169);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[3][1] = InputDataFloat(0, 170);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[3][2] = InputDataFloat(0, 171);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[3][3] = InputDataFloat(0, 172);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[0][0] = InputDataFloat(0, 173);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[0][1] = InputDataFloat(0, 174);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[0][2] = InputDataFloat(0, 175);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[0][3] = InputDataFloat(0, 176);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[1][0] = InputDataFloat(0, 177);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[1][1] = InputDataFloat(0, 178);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[1][2] = InputDataFloat(0, 179);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[1][3] = InputDataFloat(0, 180);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[2][0] = InputDataFloat(0, 181);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[2][1] = InputDataFloat(0, 182);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[2][2] = InputDataFloat(0, 183);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[2][3] = InputDataFloat(0, 184);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[3][0] = InputDataFloat(0, 185);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[3][1] = InputDataFloat(0, 186);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[3][2] = InputDataFloat(0, 187);
	Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[3][3] = InputDataFloat(0, 188);
	Context.Map.System.Age = InputDataFloat(0, 189);
	Context.Map.System.bCompleteOnInactive = InputDataBool(0, 40);
	Context.Map.System.CurrentLoopDuration = InputDataFloat(0, 190);
	Context.Map.System.ExecutionState = InputDataInt(0, 41);
	Context.Map.System.ExecutionStateSource = InputDataInt(0, 42);
	Context.Map.System.LoopCount = InputDataInt(0, 43);
	Context.Map.System.LoopedAge = InputDataFloat(0, 191);
	Context.Map.System.NormalizedLoopAge = InputDataFloat(0, 192);
	Context.Map.Grid3D_Gas_Master_Emitter.Previous.GridCenterPosition = 	Context.Map.Grid3D_Gas_Master_Emitter.GridCenterPosition;
	Context.Map.Grid3D_Gas_Master_Emitter.Previous.GridOrientation = 	Context.Map.Grid3D_Gas_Master_Emitter.GridOrientation;
	Context.Map.Grid3D_Gas_Master_Emitter.Previous.WorldGridExtents = 	Context.Map.Grid3D_Gas_Master_Emitter.WorldGridExtents;
	Context.Map.Engine.Emitter.InstanceSeed = InputDataInt(1, 0);
	Context.Map.Engine.Emitter.TotalSpawnedParticles = InputDataInt(1, 1);
	Context.Map.Engine.Grid3D_Gas_Master_Emitter.NumParticles = InputDataInt(1, 2);
	Context.Map.Engine.Owner.ExecutionState = InputDataInt(1, 3);
	Context.Map.Engine.Owner.LODDistanceFraction = InputDataFloat(1, 0);
	Context.Map.Engine.Owner.LWCTile.x = InputDataFloat(1, 1);
	Context.Map.Engine.Owner.LWCTile.y = InputDataFloat(1, 2);
	Context.Map.Engine.Owner.LWCTile.z = InputDataFloat(1, 3);
	Context.Map.Engine.Owner.LWCTile.w = InputDataFloat(1, 4);
	Context.Map.Engine.Owner.Rotation.x = InputDataFloat(1, 5);
	Context.Map.Engine.Owner.Rotation.y = InputDataFloat(1, 6);
	Context.Map.Engine.Owner.Rotation.z = InputDataFloat(1, 7);
	Context.Map.Engine.Owner.Rotation.w = InputDataFloat(1, 8);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][0] = InputDataFloat(1, 9);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][1] = InputDataFloat(1, 10);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][2] = InputDataFloat(1, 11);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][3] = InputDataFloat(1, 12);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][0] = InputDataFloat(1, 13);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][1] = InputDataFloat(1, 14);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][2] = InputDataFloat(1, 15);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][3] = InputDataFloat(1, 16);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][0] = InputDataFloat(1, 17);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][1] = InputDataFloat(1, 18);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][2] = InputDataFloat(1, 19);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][3] = InputDataFloat(1, 20);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][0] = InputDataFloat(1, 21);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][1] = InputDataFloat(1, 22);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][2] = InputDataFloat(1, 23);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][3] = InputDataFloat(1, 24);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][0] = InputDataFloat(1, 25);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][1] = InputDataFloat(1, 26);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][2] = InputDataFloat(1, 27);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][3] = InputDataFloat(1, 28);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][0] = InputDataFloat(1, 29);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][1] = InputDataFloat(1, 30);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][2] = InputDataFloat(1, 31);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][3] = InputDataFloat(1, 32);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][0] = InputDataFloat(1, 33);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][1] = InputDataFloat(1, 34);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][2] = InputDataFloat(1, 35);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][3] = InputDataFloat(1, 36);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][0] = InputDataFloat(1, 37);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][1] = InputDataFloat(1, 38);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][2] = InputDataFloat(1, 39);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][3] = InputDataFloat(1, 40);
	Context.Map.Engine.Owner.Velocity.x = InputDataFloat(1, 41);
	Context.Map.Engine.Owner.Velocity.y = InputDataFloat(1, 42);
	Context.Map.Engine.Owner.Velocity.z = InputDataFloat(1, 43);
	Context.Map.Engine.System.RandomSeed = InputDataInt(1, 4);
	Context.Map.User.WorldSpaceSize.x = InputDataFloat(1, 44);
	Context.Map.User.WorldSpaceSize.y = InputDataFloat(1, 45);
	Context.Map.User.WorldSpaceSize.z = InputDataFloat(1, 46);
	Context.Map.Engine.DeltaTime = Engine_DeltaTime;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
EnterStatScope(8 );
	Simulate(Context);
ExitStatScope();
	WriteDataSets(Context);
	{
	int TmpWriteIndex = OutputIndex(0, false, true);
	OutputDataInt(0, 0, TmpWriteIndex, Context.Map.Emitter.RandomSeed);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.CurrentLoopDuration);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceAxis.x);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceAxis.y);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceAxis.z);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceCenter.x);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceCenter.y);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceCenter.z);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceRemapRangeMax);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.DebugSliceRemapRangeMin);
	OutputDataInt(0, 1, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.DebugVectorSliceCellOffset);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.DebugVectorSliceScale);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.DistanceTraveled);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.dt);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.dx);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.dx_render);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.dx_scalars);
	OutputDataInt(0, 2, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.ExecutionState);
	OutputDataInt(0, 3, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.ExecutionStateSource);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.gravity.x);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.gravity.y);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.gravity.z);
	OutputDataInt(0, 4, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Grid3D_Gas_QualityOverrides.QualityOverride);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.GridCenterPosition.x);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.GridCenterPosition.y);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.GridCenterPosition.z);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.GridOrientation.x);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.GridOrientation.y);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.GridOrientation.z);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.GridOrientation.w);
	OutputDataBool(0, 5, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Initial.OVERRIDE.DrawResolutionGrid);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalPivot.x);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalPivot.y);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalPivot.z);
	OutputDataBool(0, 6, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalSpaceParticleSource);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[0][0]);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[0][1]);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[0][2]);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[0][3]);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[1][0]);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[1][1]);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[1][2]);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[1][3]);
	OutputDataFloat(0, 37, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[2][0]);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[2][1]);
	OutputDataFloat(0, 39, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[2][2]);
	OutputDataFloat(0, 40, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[2][3]);
	OutputDataFloat(0, 41, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[3][0]);
	OutputDataFloat(0, 42, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[3][1]);
	OutputDataFloat(0, 43, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[3][2]);
	OutputDataFloat(0, 44, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToUnit[3][3]);
	OutputDataFloat(0, 45, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[0][0]);
	OutputDataFloat(0, 46, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[0][1]);
	OutputDataFloat(0, 47, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[0][2]);
	OutputDataFloat(0, 48, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[0][3]);
	OutputDataFloat(0, 49, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[1][0]);
	OutputDataFloat(0, 50, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[1][1]);
	OutputDataFloat(0, 51, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[1][2]);
	OutputDataFloat(0, 52, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[1][3]);
	OutputDataFloat(0, 53, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[2][0]);
	OutputDataFloat(0, 54, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[2][1]);
	OutputDataFloat(0, 55, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[2][2]);
	OutputDataFloat(0, 56, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[2][3]);
	OutputDataFloat(0, 57, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[3][0]);
	OutputDataFloat(0, 58, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[3][1]);
	OutputDataFloat(0, 59, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[3][2]);
	OutputDataFloat(0, 60, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LocalToWorld[3][3]);
	OutputDataInt(0, 7, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LoopCount);
	OutputDataFloat(0, 61, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.LoopedAge);
	OutputDataFloat(0, 62, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.NormalizedLoopAge);
	OutputDataInt(0, 8, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.NumCellsMaxAxisScalar);
	OutputDataInt(0, 9, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.NumCellsMaxAxisVelocity);
	OutputDataInt(0, 10, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.NumCellsTotalScalar);
	OutputDataInt(0, 11, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.NumCellsTotalVelocity);
	OutputDataInt(0, 12, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.NumCellsXRenderTarget);
	OutputDataInt(0, 13, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.NumCellsXScalar);
	OutputDataInt(0, 14, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.NumCellsXVelocity);
	OutputDataInt(0, 15, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.NumCellsYRenderTarget);
	OutputDataInt(0, 16, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.NumCellsYScalar);
	OutputDataInt(0, 17, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.NumCellsYVelocity);
	OutputDataInt(0, 18, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.NumCellsZRenderTarget);
	OutputDataInt(0, 19, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.NumCellsZScalar);
	OutputDataInt(0, 20, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.NumCellsZVelocity);
	OutputDataFloat(0, 63, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.OVERRIDE.AttributeResolutionMultiplier);
	OutputDataBool(0, 21, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.OVERRIDE.DrawBounds);
	OutputDataBool(0, 22, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.OVERRIDE.DrawResolutionGrid);
	OutputDataInt(0, 23, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.OVERRIDE.PressureSolveIterations);
	OutputDataInt(0, 24, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.OVERRIDE.ResolutionMaxAxis);
	OutputDataFloat(0, 64, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Owner.Acceleration.x);
	OutputDataFloat(0, 65, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Owner.Acceleration.y);
	OutputDataFloat(0, 66, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Owner.Acceleration.z);
	OutputDataFloat(0, 67, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Owner.PreviousVelocity.x);
	OutputDataFloat(0, 68, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Owner.PreviousVelocity.y);
	OutputDataFloat(0, 69, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Owner.PreviousVelocity.z);
	OutputDataFloat(0, 70, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Owner.Velocity.x);
	OutputDataFloat(0, 71, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Owner.Velocity.y);
	OutputDataFloat(0, 72, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Owner.Velocity.z);
	OutputDataInt(0, 25, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.ParticleSourceGrid_Density_TemperatureIndex);
	OutputDataInt(0, 26, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.ParticleSourceGrid_DensityIndex);
	OutputDataInt(0, 27, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.ParticleSourceGrid_DivergenceIndex);
	OutputDataInt(0, 28, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.ParticleSourceGrid_RGBAIndex);
	OutputDataInt(0, 29, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.ParticleSourceGrid_TemperatureIndex);
	OutputDataInt(0, 30, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.ParticleSourceGrid_Velocity_DivergenceIndex);
	OutputDataInt(0, 31, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.ParticleSourceGrid_VelocityIndex);
	OutputDataFloat(0, 73, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Previous.GridCenterPosition.x);
	OutputDataFloat(0, 74, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Previous.GridCenterPosition.y);
	OutputDataFloat(0, 75, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Previous.GridCenterPosition.z);
	OutputDataFloat(0, 76, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Previous.GridOrientation.x);
	OutputDataFloat(0, 77, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Previous.GridOrientation.y);
	OutputDataFloat(0, 78, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Previous.GridOrientation.z);
	OutputDataFloat(0, 79, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Previous.GridOrientation.w);
	OutputDataFloat(0, 80, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Previous.WorldGridExtents.x);
	OutputDataFloat(0, 81, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Previous.WorldGridExtents.y);
	OutputDataFloat(0, 82, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Previous.WorldGridExtents.z);
	OutputDataFloat(0, 83, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[0][0]);
	OutputDataFloat(0, 84, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[0][1]);
	OutputDataFloat(0, 85, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[0][2]);
	OutputDataFloat(0, 86, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[0][3]);
	OutputDataFloat(0, 87, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[1][0]);
	OutputDataFloat(0, 88, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[1][1]);
	OutputDataFloat(0, 89, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[1][2]);
	OutputDataFloat(0, 90, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[1][3]);
	OutputDataFloat(0, 91, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[2][0]);
	OutputDataFloat(0, 92, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[2][1]);
	OutputDataFloat(0, 93, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[2][2]);
	OutputDataFloat(0, 94, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[2][3]);
	OutputDataFloat(0, 95, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[3][0]);
	OutputDataFloat(0, 96, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[3][1]);
	OutputDataFloat(0, 97, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[3][2]);
	OutputDataFloat(0, 98, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.PreviousWorldToUnit[3][3]);
	OutputDataFloat(0, 99, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.RenderDensityAlbedo);
	OutputDataFloat(0, 100, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.RenderDensityGain);
	OutputDataFloat(0, 101, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.RenderDensityOffset);
	OutputDataFloat(0, 102, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.RenderDensityRange);
	OutputDataFloat(0, 103, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.RenderSmokeColor.r);
	OutputDataFloat(0, 104, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.RenderSmokeColor.g);
	OutputDataFloat(0, 105, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.RenderSmokeColor.b);
	OutputDataFloat(0, 106, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.RenderSmokeColor.a);
	OutputDataFloat(0, 107, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.RenderTempColorGain);
	OutputDataFloat(0, 108, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.RenderTemperatureOffset);
	OutputDataFloat(0, 109, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.RenderTemperatureRange);
	OutputDataFloat(0, 110, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.RenderTempOpacityGain);
	OutputDataFloat(0, 111, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.RenderWriteDensityThreshold);
	OutputDataFloat(0, 112, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.Scalability.DistanceFraction);
	OutputDataInt(0, 32, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_Density_TemperatureIndex);
	OutputDataInt(0, 33, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_DensityIndex);
	OutputDataInt(0, 34, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_PressureIndex);
	OutputDataInt(0, 35, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_RGBAIndex);
	OutputDataInt(0, 36, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_SimFloatIndex);
	OutputDataInt(0, 37, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_SolidVelocity_BoundaryIndex);
	OutputDataInt(0, 38, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_TemperatureIndex);
	OutputDataInt(0, 39, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.SimGrid_VelocityIndex);
	OutputDataFloat(0, 113, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[0][0]);
	OutputDataFloat(0, 114, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[0][1]);
	OutputDataFloat(0, 115, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[0][2]);
	OutputDataFloat(0, 116, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[0][3]);
	OutputDataFloat(0, 117, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[1][0]);
	OutputDataFloat(0, 118, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[1][1]);
	OutputDataFloat(0, 119, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[1][2]);
	OutputDataFloat(0, 120, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[1][3]);
	OutputDataFloat(0, 121, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[2][0]);
	OutputDataFloat(0, 122, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[2][1]);
	OutputDataFloat(0, 123, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[2][2]);
	OutputDataFloat(0, 124, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[2][3]);
	OutputDataFloat(0, 125, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[3][0]);
	OutputDataFloat(0, 126, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[3][1]);
	OutputDataFloat(0, 127, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[3][2]);
	OutputDataFloat(0, 128, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToLocal[3][3]);
	OutputDataFloat(0, 129, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[0][0]);
	OutputDataFloat(0, 130, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[0][1]);
	OutputDataFloat(0, 131, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[0][2]);
	OutputDataFloat(0, 132, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[0][3]);
	OutputDataFloat(0, 133, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[1][0]);
	OutputDataFloat(0, 134, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[1][1]);
	OutputDataFloat(0, 135, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[1][2]);
	OutputDataFloat(0, 136, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[1][3]);
	OutputDataFloat(0, 137, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[2][0]);
	OutputDataFloat(0, 138, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[2][1]);
	OutputDataFloat(0, 139, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[2][2]);
	OutputDataFloat(0, 140, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[2][3]);
	OutputDataFloat(0, 141, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[3][0]);
	OutputDataFloat(0, 142, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[3][1]);
	OutputDataFloat(0, 143, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[3][2]);
	OutputDataFloat(0, 144, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.UnitToWorld[3][3]);
	OutputDataFloat(0, 145, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldCellSizeScalar.x);
	OutputDataFloat(0, 146, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldCellSizeScalar.y);
	OutputDataFloat(0, 147, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldCellSizeScalar.z);
	OutputDataFloat(0, 148, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldCellSizeVelocity.x);
	OutputDataFloat(0, 149, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldCellSizeVelocity.y);
	OutputDataFloat(0, 150, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldCellSizeVelocity.z);
	OutputDataFloat(0, 151, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldGridExtents.x);
	OutputDataFloat(0, 152, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldGridExtents.y);
	OutputDataFloat(0, 153, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldGridExtents.z);
	OutputDataFloat(0, 154, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldRenderGridScale.x);
	OutputDataFloat(0, 155, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldRenderGridScale.y);
	OutputDataFloat(0, 156, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldRenderGridScale.z);
	OutputDataFloat(0, 157, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[0][0]);
	OutputDataFloat(0, 158, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[0][1]);
	OutputDataFloat(0, 159, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[0][2]);
	OutputDataFloat(0, 160, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[0][3]);
	OutputDataFloat(0, 161, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[1][0]);
	OutputDataFloat(0, 162, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[1][1]);
	OutputDataFloat(0, 163, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[1][2]);
	OutputDataFloat(0, 164, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[1][3]);
	OutputDataFloat(0, 165, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[2][0]);
	OutputDataFloat(0, 166, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[2][1]);
	OutputDataFloat(0, 167, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[2][2]);
	OutputDataFloat(0, 168, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[2][3]);
	OutputDataFloat(0, 169, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[3][0]);
	OutputDataFloat(0, 170, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[3][1]);
	OutputDataFloat(0, 171, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[3][2]);
	OutputDataFloat(0, 172, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToLocal[3][3]);
	OutputDataFloat(0, 173, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[0][0]);
	OutputDataFloat(0, 174, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[0][1]);
	OutputDataFloat(0, 175, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[0][2]);
	OutputDataFloat(0, 176, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[0][3]);
	OutputDataFloat(0, 177, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[1][0]);
	OutputDataFloat(0, 178, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[1][1]);
	OutputDataFloat(0, 179, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[1][2]);
	OutputDataFloat(0, 180, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[1][3]);
	OutputDataFloat(0, 181, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[2][0]);
	OutputDataFloat(0, 182, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[2][1]);
	OutputDataFloat(0, 183, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[2][2]);
	OutputDataFloat(0, 184, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[2][3]);
	OutputDataFloat(0, 185, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[3][0]);
	OutputDataFloat(0, 186, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[3][1]);
	OutputDataFloat(0, 187, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[3][2]);
	OutputDataFloat(0, 188, TmpWriteIndex, Context.Map.Grid3D_Gas_Master_Emitter.WorldToUnit[3][3]);
	OutputDataFloat(0, 189, TmpWriteIndex, Context.Map.System.Age);
	OutputDataBool(0, 40, TmpWriteIndex, Context.Map.System.bCompleteOnInactive);
	OutputDataFloat(0, 190, TmpWriteIndex, Context.Map.System.CurrentLoopDuration);
	OutputDataInt(0, 41, TmpWriteIndex, Context.Map.System.ExecutionState);
	OutputDataInt(0, 42, TmpWriteIndex, Context.Map.System.ExecutionStateSource);
	OutputDataInt(0, 43, TmpWriteIndex, Context.Map.System.LoopCount);
	OutputDataFloat(0, 191, TmpWriteIndex, Context.Map.System.LoopedAge);
	OutputDataFloat(0, 192, TmpWriteIndex, Context.Map.System.NormalizedLoopAge);
	}
ExitStatScope();
}
#line 845 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"



#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=VVM_1 -entry=SimulateMain -shaderPlatformName=None -cs B:/UnrealEngine5_Projects/_repos3/UE5-RTS/RTS/Saved/ShaderDebugInfo/VM/Game/VFX/Test/NS_TestFireBolt/SystemUpdateScript/NiagaraEmitterInstanceShader.usf -cflags=2097152 -hlslccflags=1048578 -nocrashreports
#endif /*DIRECT COMPILE*/
